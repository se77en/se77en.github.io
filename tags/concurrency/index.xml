<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrency on 罄竹难书</title>
    <link>https://se77en.cc/tags/concurrency/index.xml</link>
    <description>Recent content in Concurrency on 罄竹难书</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://se77en.cc/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go 语言的并发模型--通过通信来共享内存</title>
      <link>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B--%E9%80%9A%E8%BF%87%E9%80%9A%E4%BF%A1%E6%9D%A5%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</link>
      <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B--%E9%80%9A%E8%BF%87%E9%80%9A%E4%BF%A1%E6%9D%A5%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</guid>
      <description>&lt;p&gt;##概述&lt;/p&gt;

&lt;p&gt;我一直在找一种好的方法来解释 go 语言的&lt;a href=&#34;http://golang.org/doc/effective_go.html#concurrency&#34;&gt;并发模型&lt;/a&gt;：
&amp;gt; 不要通过共享内存来通信，相反，应该通过通信来共享内存&lt;/p&gt;

&lt;p&gt;但是没有发现一个好的解释来满足我下面的需求：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过一个例子来说明最初的问题&lt;/li&gt;
&lt;li&gt;提供一个共享内存的解决方案&lt;/li&gt;
&lt;li&gt;提供一个通过通信的解决方案&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇文章我就从这三个方面来做出解释。&lt;/p&gt;

&lt;p&gt;读过这篇文章后你应该会了解&lt;strong&gt;&lt;em&gt;通过通信来共享内存&lt;/em&gt;&lt;/strong&gt;的模型，以及它和&lt;strong&gt;&lt;em&gt;通过共享内存来通信&lt;/em&gt;&lt;/strong&gt;的区别，你还将看到如何分别通过这两种模型来解决访问和修改共享资源的问题。

##前提&lt;/p&gt;

&lt;p&gt;设想一下我们要访问一个银行账号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Account interface {
  Withdraw(uint)
  Deposit(uint)
  Balance() int
}

type Bank struct {
  account Account
}

func NewBank(account Account) *Bank {
  return &amp;amp;Bank{account: account}
}

func (bank *Bank) Withdraw(amount uint, actor_name string) {
  fmt.Println(&amp;quot;[-]&amp;quot;, amount, actor_name)
  bank.account.Withdraw(amount)
}

func (bank *Bank) Deposit(amount uint, actor_name string) {
  fmt.Println(&amp;quot;[+]&amp;quot;, amount, actor_name)
  bank.account.Deposit(amount)
}

func (bank *Bank) Balance() int {
  return bank.account.Balance()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为 &lt;code&gt;Account&lt;/code&gt; 是一个接口，所以我们提供一个简单的实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type SimpleAccount struct{
  balance int
}

func NewSimpleAccount(balance int) *SimpleAccount {
  return &amp;amp;SimpleAccount{balance: balance}
}

func (acc *SimpleAccount) Deposit(amount uint) {
  acc.setBalance(acc.balance + int(amount))
}

func (acc *SimpleAccount) Withdraw(amount uint) {
  if acc.balance &amp;gt;= int(amount) {
    acc.setBalance(acc.balance - int(amount))
  } else {
    panic(&amp;quot;杰克穷死&amp;quot;)
  }
}

func (acc *SimpleAccount) Balance() int {
  return acc.balance
}

func (acc *SimpleAccount) setBalance(balance int) {
  acc.add_some_latency()  //增加一个延时函数，方便演示
  acc.balance = balance
}

func (acc *SimpleAccount) add_some_latency() {
  &amp;lt;-time.After(time.Duration(rand.Intn(100)) * time.Millisecond)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可能注意到了 &lt;code&gt;balance&lt;/code&gt; 没有被直接修改，而是被放到了  &lt;code&gt;setBalance&lt;/code&gt; 方法里进行修改。这样设计是为了更好的描述问题。稍后我会做出解释。&lt;/p&gt;

&lt;p&gt;把上面所有部分弄好以后我们就可以像下面这样使用它啦：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  balance := 80
  b := NewBank(NewSimpleAccount(balance))
  
  fmt.Println(&amp;quot;初始化余额&amp;quot;, b.Balance())
  
  b.Withdraw(30, &amp;quot;马伊琍&amp;quot;)
  
  fmt.Println(&amp;quot;-----------------&amp;quot;)
  fmt.Println(&amp;quot;剩余余额&amp;quot;, b.Balance())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行上面的代码会输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;初始化余额 80
[-] 30 马伊琍
-----------------
剩余余额 50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没错！&lt;/p&gt;

&lt;p&gt;不错在现实生活中，一个银行账号可以有很多个附属卡，不同的附属卡都可以对同一个账号进行存取钱，所以我们来修改一下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  balance := 80
  b := NewBank(NewSimpleAccount(balance))
  
  fmt.Println(&amp;quot;初始化余额&amp;quot;, b.Balance())
  
  done := make(chan bool)
  
  go func() { b.Withdraw(30, &amp;quot;马伊琍&amp;quot;); done &amp;lt;- true }()
  go func() { b.Withdraw(10, &amp;quot;姚笛&amp;quot;); done &amp;lt;- true }()
  
  //等待 goroutine 执行完成
  &amp;lt;-done
  &amp;lt;-done
  
  fmt.Println(&amp;quot;-----------------&amp;quot;)
  fmt.Println(&amp;quot;剩余余额&amp;quot;, b.Balance())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这儿两个附属卡并发的从账号里取钱，来看看输出结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;初始化余额 80
[-] 30 马伊琍
[-] 10 姚笛
-----------------
剩余余额 70
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这下把文章高兴坏了:)&lt;/p&gt;

&lt;p&gt;结果当然是错误的，剩余余额应该是40而不是70，那么让我们看看到底哪儿出问题了。&lt;/p&gt;

&lt;p&gt;##问题&lt;/p&gt;

&lt;p&gt;当并发访问共享资源时，无效状态有很大可能会发生。&lt;/p&gt;

&lt;p&gt;在我们的例子中，当两个附属卡同一时刻从同一个账号取钱后，我们最后得到银行账号(即共享资源)错误的剩余余额(即无效状态)。&lt;/p&gt;

&lt;p&gt;我们来看一下执行时候的情况：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                 处理情况
             --------------
             _马伊琍_|_姚笛_
 1. 获取余额     80  |  80
 2. 取钱       -30  | -10
 3. 当前剩余     50  |  70
                ... | ...
 4. 设置余额     50  ?  70  //该先设置哪个好呢？
 5. 后设置的生效了
             --------------
 6. 剩余余额        70
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面 &lt;code&gt;...&lt;/code&gt; 的地方描述了我们 &lt;code&gt;add_some_latency&lt;/code&gt; 实现的延时状况，现实世界经常发生延迟情况。所以最后的剩余余额就由最后设置余额的那个附属卡决定。&lt;/p&gt;

&lt;p&gt;##解决办法&lt;/p&gt;

&lt;p&gt;我们通过两种方法来解决这个问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;共享内存的解决方案&lt;/li&gt;
&lt;li&gt;通过通信的解决方案&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有的解决方案都是简单的封装了一下 &lt;code&gt;SimpleAccount&lt;/code&gt; 来实现保护机制。&lt;/p&gt;

&lt;p&gt;###共享内存的解决方案&lt;/p&gt;

&lt;p&gt;又叫 “通过共享内存来通信”。&lt;/p&gt;

&lt;p&gt;这种方案暗示了使用锁机制来预防同时访问和修改共享资源。锁告诉其它处理程序这个资源已经被一个处理程序占用了，因此别的处理程序需要排队直到当前处理程序处理完毕。&lt;/p&gt;

&lt;p&gt;让我们来看看 &lt;code&gt;LockingAccount&lt;/code&gt; 是怎么实现的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type LockingAccount struct {
  lock    sync.Mutex
  account *SimpleAccount
}

//封装一下 SimpleAccount
func NewLockingAccount(balance int) *LockingAccount {
  return &amp;amp;LockingAccount{account: NewSimpleAccount(balance)}
}

func (acc *LockingAccount) Deposit(amount uint) {
  acc.lock.Lock()
  defer acc.lock.Unlock()
  acc.account.Deposit(amount)
}

func (acc *LockingAccount) Withdraw(amount uint) {
  acc.lock.Lock()
  defer acc.lock.Unlock()
  acc.account.Withdraw(amount)
}

func (acc *LockingAccount) Balance() int {
  acc.lock.Lock()
  defer acc.lock.Unlock()
  return acc.account.Balance()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接明了！注意 &lt;code&gt;lock sync.Lock&lt;/code&gt;，&lt;code&gt;lock.Lock()&lt;/code&gt;，&lt;code&gt;lock.Unlock()&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这样每次一个附属卡访问银行账号(即共享资源)，这个附属卡会自动获得锁直到最后操作完毕。&lt;/p&gt;

&lt;p&gt;我们的 &lt;code&gt;LockingAccount&lt;/code&gt; 像下面这样使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  balance := 80
  b := NewBank(NewLockingAccount(balance))
  
  fmt.Println(&amp;quot;初始化余额&amp;quot;, b.Balance())
  
  done := make(chan bool)
  
  go func() { b.Withdraw(30, &amp;quot;马伊琍&amp;quot;); done &amp;lt;- true }()
  go func() { b.Withdraw(10, &amp;quot;姚笛&amp;quot;); done &amp;lt;- true }()
  
  //等待 goroutine 执行完成
  &amp;lt;-done
  &amp;lt;-done
  
  fmt.Println(&amp;quot;-----------------&amp;quot;)
  fmt.Println(&amp;quot;剩余余额&amp;quot;, b.Balance())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出的结果是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;初始化余额 80
[-] 30 马伊琍
[-] 10 姚笛
-----------------
剩余余额 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在结果正确了！&lt;/p&gt;

&lt;p&gt;在这个例子中第一个处理程序加锁后独享共享资源，其它处理程序只能等待它执行完成。&lt;/p&gt;

&lt;p&gt;我们接着看一下执行时的情况，假设马伊琍先拿到了锁：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                            处理过程
                        ________________
                        _马伊琍_|__姚笛__
        加锁                   &amp;gt;&amp;lt;
        得到余额            80  |
        取钱               -30  |
        当前余额            50  |
                           ... |
        设置余额            50  |
        解除锁                 &amp;lt;&amp;gt;
                               |
        当前余额                50
                               |
        加锁                   &amp;gt;&amp;lt;
        得到余额                |  50
        取钱                    | -10
        当前余额                |  40
                               |  ...
        设置余额                |  40
        解除锁                  &amp;lt;&amp;gt;
                        ________________
        剩余余额                40

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们的处理程序在访问共享资源时相继的产生了正确的结果。&lt;/p&gt;

&lt;p&gt;###通过通信的解决方案&lt;/p&gt;

&lt;p&gt;又叫 “通过通信来共享内存”。&lt;/p&gt;

&lt;p&gt;现在账号被命名为 &lt;code&gt;ConcurrentAccount&lt;/code&gt;，像下面这样来实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type ConcurrentAccount struct {
  account     *SimpleAccount
  deposits    chan uint
  withdrawals chan uint
  balances    chan chan int
}

func NewConcurrentAccount(amount int) *ConcurrentAccount{
  acc := &amp;amp;ConcurrentAccount{
    account :    &amp;amp;SimpleAccount{balance: amount},
    deposits:    make(chan uint),
    withdrawals: make(chan uint),
    balances:    make(chan chan int),
  }
  acc.listen()
  
  return acc
}

func (acc *ConcurrentAccount) Balance() int {
  ch := make(chan int)
  acc.balances &amp;lt;- ch
  return &amp;lt;-ch
}

func (acc *ConcurrentAccount) Deposit(amount uint) {
  acc.deposits &amp;lt;- amount
}

func (acc *ConcurrentAccount) Withdraw(amount uint) {
  acc.withdrawals &amp;lt;- amount
}

func (acc *ConcurrentAccount) listen() {
  go func() {
    for {
      select {
      case amnt := &amp;lt;-acc.deposits:
        acc.account.Deposit(amnt)
      case amnt := &amp;lt;-acc.withdrawals:
        acc.account.Withdraw(amnt)
      case ch := &amp;lt;-acc.balances:
        ch &amp;lt;- acc.account.Balance()
      }
    }
  }()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ConcurrentAccount&lt;/code&gt; 同样封装了 &lt;code&gt;SimpleAccount&lt;/code&gt; ，然后增加了通信通道&lt;/p&gt;

&lt;p&gt;调用代码和加锁版本的一样，这里就不写了，唯一不一样的就是初始化银行账号的时候：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;b := NewBank(NewConcurrentAccount(balance))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行产生的结果和加锁版本一样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;初始化余额 80
[-] 30 马伊琍
[-] 10 姚笛
-----------------
剩余余额 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们来深入了解一下细节。&lt;/p&gt;

&lt;p&gt;###通过通信来共享内存是如何工作的&lt;/p&gt;

&lt;p&gt;一些基本注意点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;共享资源被封装在一个控制流程中。
结果就是资源成为了非共享状态。没有处理程序能够直接访问或者修改资源。你可以看到访问和修改资源的方法实际上并没有执行任何改变。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  func (acc *ConcurrentAccount) Balance() int {
    ch := make(chan int)
    acc.balances &amp;lt;- ch
    balance := &amp;lt;-ch
    return balance
  }
  func (acc *ConcurrentAccount) Deposit(amount uint) {
    acc.deposits &amp;lt;- amount
  }

  func (acc *ConcurrentAccount) Withdraw(amount uint) {
    acc.withdrawals &amp;lt;- amount
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;访问和修改是通过消息和控制流程通信。&lt;/li&gt;
&lt;li&gt;在控制流程中任何访问和修改的动作都是相继发生的。
当控制流程接收到访问或者修改的请求后会立即执行相关动作。让我们仔细看看这个流程：
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  func (acc *ConcurrentAccount) listen() {
    // 执行控制流程
    go func() {
      for {
        select {
        case amnt := &amp;lt;-acc.deposits:
          acc.account.Deposit(amnt)
        case amnt := &amp;lt;-acc.withdrawals:
          acc.account.Withdraw(amnt)
        case ch := &amp;lt;-acc.balances:
          ch &amp;lt;- acc.account.Balance()
        }
      }
    }()
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Select_statements&#34;&gt;select&lt;/a&gt; 不断地从各个通道中取出消息，每个通道都跟它们所要执行的操作相一致。&lt;/p&gt;

&lt;p&gt;重要的一点是：在 &lt;code&gt;select&lt;/code&gt; 声明内部的一切都是相继执行的(在同一个处理程序中排队执行)。一次只有一个事件(在通道中接受或者发送)发生，这样就保证了同步访问共享资源。&lt;/p&gt;

&lt;p&gt;领会这个有一点绕。&lt;/p&gt;

&lt;p&gt;让我们用例子来看看 &lt;code&gt;Balance()&lt;/code&gt; 的执行情况：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         一张附属卡的流程      |   控制流程 
      ----------------------------------------------

 1.     b.Balance()         |
 2.             ch -&amp;gt; [acc.balances]-&amp;gt; ch
 3.             &amp;lt;-ch        |  balance = acc.account.Balance()
 4.     return  balance &amp;lt;-[ch]&amp;lt;- balance
 5                          |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这两个流程都干了点什么呢？&lt;/p&gt;

&lt;p&gt;###附属卡的流程&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;调用 &lt;code&gt;b.Balance()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建通道 &lt;code&gt;ch&lt;/code&gt;，将 &lt;code&gt;ch&lt;/code&gt; 通道塞入通道 &lt;code&gt;acc.balances&lt;/code&gt; 中与控制流程通信，这样控制流程也可以通过 &lt;code&gt;ch&lt;/code&gt; 来返回余额&lt;/li&gt;
&lt;li&gt;等待 &lt;code&gt;&amp;lt;-ch&lt;/code&gt; 来取得要接受的余额&lt;/li&gt;
&lt;li&gt;接受余额&lt;/li&gt;
&lt;li&gt;继续&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###控制流程&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;空闲或者处理&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;acc.balances&lt;/code&gt; 通道里面的 &lt;code&gt;ch&lt;/code&gt; 通道来接受余额请求&lt;/li&gt;
&lt;li&gt;取得真正的余额值&lt;/li&gt;
&lt;li&gt;将余额值发送到 &lt;code&gt;ch&lt;/code&gt; 通道&lt;/li&gt;
&lt;li&gt;准备处理下一个请求&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;控制流程每次只处理一个 &lt;code&gt;事件&lt;/code&gt;。这也就是为什么除了描述出来的这些以外，第2-4步没有别的操作执行。&lt;/p&gt;

&lt;p&gt;##总结&lt;/p&gt;

&lt;p&gt;这篇博客描述了问题以及问题的解决办法，但那时没有深入去探究不同解决办法的优缺点。&lt;/p&gt;

&lt;p&gt;其实这篇文章的例子更适合用 mutex，因为这样代码更加清晰。&lt;/p&gt;

&lt;p&gt;最后，请毫无顾忌的指出我的错误！&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>