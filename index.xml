<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>罄竹难书</title>
    <link>https://se77en.cc/index.xml</link>
    <description>Recent content on 罄竹难书</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 21 Mar 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://se77en.cc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>为你的 Github Page 加上 HTTPS</title>
      <link>https://se77en.cc/2016/%E4%B8%BA%E4%BD%A0%E7%9A%84-github-page-%E5%8A%A0%E4%B8%8A-https/</link>
      <pubDate>Mon, 21 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2016/%E4%B8%BA%E4%BD%A0%E7%9A%84-github-page-%E5%8A%A0%E4%B8%8A-https/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;前几天突然收到一封邮件，长这样：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey Damon Zhao!&lt;/p&gt;

&lt;p&gt;I am @nubela on Github and I found your project (se77en/se77en.github.io) on Github. There is a small chance you might have heard of some of my projects such as Javelin Browser or Gom VPN.&lt;/p&gt;

&lt;p&gt;Anyways, I found that Github Page at se77en/se77en.github.io has a custom domain, and I was wondering if I can help you get it to HTTPS with a LetsEncrypt cert? (for free, of course!)&lt;/p&gt;

&lt;p&gt;I work at Kloudsec (a free and minimal CDN for programmers) and I just built this tool to provision LetsEncrypt certs for github pages.&lt;/p&gt;

&lt;p&gt;Will you like to try it? (and help me test it?) ;)&lt;/p&gt;

&lt;p&gt;Steven.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;意思就是他们做个一个可以免费帮你把 Github Page 加 HTTPS 的服务，活雷锋啊，谁信啊！反正我是没信，这哥们估计也猜到了我不会信，又连着发了几封，就是说反正不花钱，你的博客又没有秘密，试试呗。然后我就试试了。。。试完感觉上天了，赶紧回复这哥们这东西好啊，爽歪歪啊，你是活雷锋啊。他说我服务这么好你写篇博客替我宣传呗，我说必须哒！于是有个这篇博客。
&lt;/p&gt;

&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;

&lt;p&gt;首先你得有个自定义域名，没有的话就别往下看了。&lt;/p&gt;

&lt;h2 id=&#34;步骤&#34;&gt;步骤&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;访问 &lt;a href=&#34;https://kloudsec.com&#34;&gt;活雷锋网站 Kloudsec&lt;/a&gt;，大概长这样，然后点击泛黄的按钮。
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/1.png&#34; alt=&#34;1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;在弹出的白匡里输入你的域名。
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/2.png&#34; alt=&#34;2&#34; /&gt;&lt;/li&gt;
&lt;li&gt;输入邮箱和密码注册账号。
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/3.png&#34; alt=&#34;3&#34; /&gt;&lt;/li&gt;
&lt;li&gt;登录你的邮箱激活账号。
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/4.png&#34; alt=&#34;4&#34; /&gt;&lt;/li&gt;
&lt;li&gt;激活登录账号以后主页应该长这样。点击 &lt;strong&gt;GET INSTRUCTIONS&lt;/strong&gt;。
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/5.png&#34; alt=&#34;5&#34; /&gt;&lt;/li&gt;
&lt;li&gt;接下来它会给出一些配置，登录你的域名 DNS 提供商修改这些配置，我用的是 dnspod，长这样(注意 A 记录只能留它给的这一个，之前的要全部删除掉)，修改完之后点击 &lt;strong&gt;VERIFY DNS RECORDS&lt;/strong&gt;。
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/6-1.png&#34; alt=&#34;6-2&#34; /&gt;
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/6-2.png&#34; alt=&#34;6-2&#34; /&gt;
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/6-3.png&#34; alt=&#34;6-3&#34; /&gt;&lt;/li&gt;
&lt;li&gt;验证完成(可能等待与人品成反比的时间)之后，回到主页点击类似播放键的按钮，会出现几个问题等待修复，一个一个修复就行，全程下一步。
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/7.png&#34; alt=&#34;7&#34; /&gt;&lt;/li&gt;
&lt;li&gt;然后等待获取 https 证书，同样等待时间与人品成反比，不要急，你人品不行。
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/8-1.png&#34; alt=&#34;8-2&#34; /&gt;
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/8-2.png&#34; alt=&#34;8-2&#34; /&gt;&lt;/li&gt;
&lt;li&gt;现在可以访问 &lt;code&gt;https://yourawesomeshittydomain.xxoo&lt;/code&gt; 来验证看是否成功了。&lt;/li&gt;
&lt;li&gt;这时你可能会发现直接输入不加 &lt;code&gt;https&lt;/code&gt; 前缀的域名不会自动跳转到 &lt;code&gt;https&lt;/code&gt; 开头的域名，同样 &lt;code&gt;www&lt;/code&gt; 开头的域名也不会，不用担心，活雷锋都替你想好了。&lt;/li&gt;
&lt;li&gt;点击左侧边栏的 &lt;strong&gt;PROTECTION&lt;/strong&gt; 然后把自动重定向到 &lt;code&gt;https&lt;/code&gt; 都打开。
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/11-1.png&#34; alt=&#34;11-1&#34; /&gt;
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/11-2.png&#34; alt=&#34;11-2&#34; /&gt;&lt;/li&gt;
&lt;li&gt;完成了，上天吧(额。。。上天是不可能的，不过谷歌会提高 https 网站的搜索排名，国内某(垃圾)搜索引擎不详)！
&lt;img src=&#34;https://se77en.cc/img/make-your-github-page-custom-domain-with-https/12.png&#34; alt=&#34;12&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;感谢&#34;&gt;感谢&lt;/h2&gt;

&lt;p&gt;感觉那些活雷锋(steven@nubela.co)们。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>探索 Rust 的所有权系统(Ownership System)</title>
      <link>https://se77en.cc/2015/%E6%8E%A2%E7%B4%A2-rust-%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9Fownership-system/</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2015/%E6%8E%A2%E7%B4%A2-rust-%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9Fownership-system/</guid>
      <description>&lt;h2 id=&#34;主要内容&#34;&gt;主要内容&lt;/h2&gt;

&lt;p&gt;这两个部分的介绍是为了给那些了解 rust 基本语法，写过一些小的 demo 代码，但却不是很清楚 &lt;code&gt;ownership&lt;/code&gt; 和 &lt;code&gt;borrowing&lt;/code&gt; 机制的码农看的。&lt;/p&gt;

&lt;p&gt;我们从最简单的开始，然后一步一步逐渐复杂化，探索每一个细节。这个介绍文章假设你非常了解 &lt;code&gt;let&lt;/code&gt;，&lt;code&gt;fn&lt;/code&gt;，&lt;code&gt;struct&lt;/code&gt;，&lt;code&gt;trait&lt;/code&gt; 和 &lt;code&gt;impl&lt;/code&gt; 概念。

我们的目标是学习如果写 rust 代码，而且在写的过程中不要碰到有关 &lt;code&gt;ownership&lt;/code&gt; 和 &lt;code&gt;borrowing&lt;/code&gt; 的墙。&lt;/p&gt;

&lt;p&gt;首先是 &lt;em&gt;ownership&lt;/em&gt; 部分：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在简单介绍之后&lt;/li&gt;
&lt;li&gt;学习 &lt;code&gt;Copy Traits&lt;/code&gt;，然后&lt;/li&gt;
&lt;li&gt;学习 不可变(&lt;code&gt;Immutable&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;和 可变(&lt;code&gt;Mutable&lt;/code&gt;) 所有权规则&lt;/li&gt;
&lt;li&gt;然后介绍一下所有权系统的强大之处&lt;/li&gt;
&lt;li&gt;体现在内存管理方面&lt;/li&gt;
&lt;li&gt;垃圾回收方面&lt;/li&gt;
&lt;li&gt;以及并发方面&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;先决条件-你应该预先知道的&#34;&gt;先决条件 &amp;ndash; 你应该预先知道的&lt;/h2&gt;

&lt;p&gt;基于 作用域/栈 的内存管理很简单，因为我们已经很熟悉它的工作方式了。比如下面的代码，&lt;code&gt;i&lt;/code&gt; 在 &lt;code&gt;main&lt;/code&gt; 函数的最后发生了什么？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let i = 5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它离开了作用域然后释放了，对吗？&lt;/p&gt;

&lt;p&gt;那如果我们把 &lt;code&gt;i&lt;/code&gt; 传给另一个函数 &lt;code&gt;foo&lt;/code&gt;，它释放了几次？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn foo(i: i64) {
    // 干点啥
}

fn main() {
    let i = 5;
    foo(i);  // 调用 foo 函数
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是的，它释放了两次。第一次是在 &lt;code&gt;foo&lt;/code&gt; 函数结束时候，第二次是在 &lt;code&gt;main&lt;/code&gt; 函数结束之后。如果你修改了 &lt;code&gt;foo&lt;/code&gt;，那么&lt;strong&gt;完全不会影响&lt;/strong&gt; &lt;code&gt;main&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因为在调用 &lt;code&gt;foo(i)&lt;/code&gt; 的时候值被拷贝了。&lt;/p&gt;

&lt;p&gt;在 Rust 中，就像在 C艹 中(或者其他的语言)，可以使用你的自定义类型来替代 Int。值将会被分配在当前栈，然后在离开作用域的时候被释放。&lt;/p&gt;

&lt;p&gt;然而，Rust 编译器使用了不同的所有权规则，除非类型实现了 &lt;code&gt;Copy&lt;/code&gt; 特质。
因此，我们先来讨论一下 &lt;code&gt;Copy&lt;/code&gt; 特质，看看它是如何工作的。&lt;/p&gt;

&lt;h2 id=&#34;copy-trait&#34;&gt;Copy Trait&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Copy&lt;/code&gt; 特质使类型的行为有了同样的方式：它每次赋值或者用作函数参数的时候，内存空间地址会被完整拷贝到另一个内存地址。实现这个特质允许你像使用内建 integer 一样使用你自定义类型。&lt;/p&gt;

&lt;p&gt;内建的类型 &lt;code&gt;i64&lt;/code&gt;(一种类型的 integer) 实现了这个特质，还有&lt;a href=&#34;http://doc.rust-lang.org/std/marker/trait.Copy.html&#34;&gt;很多类型&lt;/a&gt;都实现了它。&lt;/p&gt;

&lt;p&gt;如果我们有一个 &lt;code&gt;Info&lt;/code&gt; 结构体，我们可以通过实现 &lt;code&gt;Copy&lt;/code&gt; 特质来让它可拷贝。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct Info {
    value: i64,
}
impl Copy for Info {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者，使用 &lt;code&gt;#[derive(Copy)]&lt;/code&gt; 属性实现同样的功能&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[derive(Copy)]
struct Info {
    value: i64,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没有实现 &lt;code&gt;Copy&lt;/code&gt; 特质的类型将会移动到另一个地址并且服从所有权规则。&lt;/p&gt;

&lt;h2 id=&#34;所有权-ownership&#34;&gt;所有权(Ownership)&lt;/h2&gt;

&lt;p&gt;所有权规则规定：对于一个不可被拷贝的值，在任意一个地方，只能有一个所有者可以&lt;strong&gt;改变&lt;/strong&gt;它。&lt;/p&gt;

&lt;p&gt;因此，如果一个函数有责任删除一个值，它可以确认未来没有其他的所有者会访问，修改或者删除它。&lt;/p&gt;

&lt;p&gt;抽象的概念就说这么多，来看看具体的例子！&lt;/p&gt;

&lt;h3 id=&#34;向-bob-问好-我们的人体模型结构体&#34;&gt;向 Bob 问好，我们的人体模型结构体。。。&lt;/h3&gt;

&lt;p&gt;为了证明数据是如何移动的，我们创建一个新的结构体，叫做 &lt;code&gt;Bob&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct Bob {
    name: String,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 Bob 的构造方法 &lt;code&gt;new&lt;/code&gt; 中，我们宣布一下他的创建：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;impl Bob {
    fn new(name: &amp;amp;str) -&amp;gt; Bob {
        println!(&amp;quot;new bob {:?}&amp;quot;, name);
        Bob { name: name.to_string() }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当 Bob 被销毁时(对不起啦 Bob)，我们通过实现内建的 &lt;code&gt;Drop::drop&lt;/code&gt; 特质来打印一下他的名字：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;impl Drop for Bob {
    fn drop(&amp;amp;mut self) {
        println!(&amp;quot;del bob {:?}&amp;quot;, self.name);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了让 bob 的值在打印时候可以格式化，我们试下一下内建的 &lt;code&gt;Show::fmt&lt;/code&gt; 特质方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;impl fmt::Show for Bob {
    fn fmt(&amp;amp;self, f: &amp;amp;mut fmt::Formatter) -&amp;gt; fmt::Result {
        write!(f, &amp;quot;bob {:?}&amp;quot;, self.name)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;来测试一下&#34;&gt;来测试一下&lt;/h3&gt;

&lt;p&gt;当我们在 &lt;code&gt;main&lt;/code&gt; 函数中创建 Bob 时，我们得到一个预期的结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    Bob::new(&amp;quot;A&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob &amp;quot;A&amp;quot;
del bob &amp;quot;A&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好的，bob 挂了，但是啥时候挂的？&lt;/p&gt;

&lt;p&gt;让我们在函数结尾插入一个 &amp;ldquo;print&amp;rdquo; 语句：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main () {
    Bob::new(&amp;quot;A&amp;quot;);
    println!{&amp;quot;end is near&amp;quot;};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob &amp;quot;A&amp;quot;
del bob &amp;quot;A&amp;quot;
end is near
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他在函数&lt;strong&gt;结束前&lt;/strong&gt;就已经挂了。返回值并没有被赋值给任何东西，所以编译器调用了 &lt;code&gt;drop&lt;/code&gt; 来在他创建的地方销毁他。&lt;/p&gt;

&lt;p&gt;如果我们绑定返回值给一个变量呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let bob = Bob::new(&amp;quot;A&amp;quot;)
    println!(&amp;quot;end is near&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob &amp;quot;A&amp;quot;
end is near
del bob &amp;quot;A&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有了 &lt;code&gt;let&lt;/code&gt; 绑定，他在函数结束时才会挂，也就是在离开作用域时。所以，编译器&lt;strong&gt;在作用域结束时销毁绑定值&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&#34;销毁它-除非它移动了&#34;&gt;销毁它，除非它移动了&lt;/h3&gt;

&lt;p&gt;值可以被&lt;strong&gt;移动&lt;/strong&gt;到另一个地方，如果它移动了，它不会被销毁！&lt;/p&gt;

&lt;p&gt;那么怎么移动呢？其实也就是简单地把它们&lt;strong&gt;作为值&lt;/strong&gt;传给另一个函数。&lt;/p&gt;

&lt;p&gt;让我们把我们的 bob 值传给一个叫 &lt;code&gt;black_hole&lt;/code&gt; 的函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn black_hole(bob: Bob) {
    println!(&amp;quot;imminent shrinkage {:?}&amp;quot;, bob);
}

fn main() {
    let bob = Bob::new(&amp;quot;A&amp;quot;);
    black_hole(bob);
    println!(&amp;quot;&amp;quot;end is near);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob &amp;quot;A&amp;quot;
imminent shrikage bob &amp;quot;A&amp;quot;
del bob &amp;quot;A&amp;quot;
end is near
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://dwz.cn/APyM7&#34;&gt;自己试一下&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;bob 在 black_hole 函数里挂了，而不是在 &lt;code&gt;main&lt;/code&gt; 函数的结尾!&lt;/p&gt;

&lt;p&gt;等一下，如果我们把 Bob 传给 black_hole 两次会发生什么呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let bob = Bob::new(&amp;quot;A&amp;quot;);
    black_hole(bob);
    black_hole(bob);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;anon&amp;gt;:35:16: 35:19 error: use of moved value: `bob`
&amp;lt;anon&amp;gt;:35     black_hole(bob);
                         ^~~
&amp;lt;anon&amp;gt;:34:16: 34:19 note: `bob` moved here because it has type `Bob`, which is non-copyable
&amp;lt;anon&amp;gt;:34     black_hole(bob);
                         ^~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译器告诉我们不可以使用已经移动的值，而且做了详细的解释。&lt;/p&gt;

&lt;h3 id=&#34;没有魔法-只是规则而已&#34;&gt;没有魔法 &amp;ndash; 只是规则而已&lt;/h3&gt;

&lt;p&gt;为了实现 “不用垃圾回收机制的内存安全”，编译器不需要追踪你代码里的值。编译器可以通过观测函数体来确定函数需要销毁哪些值。&lt;/p&gt;

&lt;p&gt;如果你知道规则，你也可以简单的做到这些。到目前为止，我们知道了一些规则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;没有使用的返回值会被销毁&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有被绑定到 &lt;code&gt;let&lt;/code&gt; 的值都会在函数结尾处被销毁，除非它被移动了&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在我们知道了，内存安全实际是基于一个值只能有一个所有者。&lt;/p&gt;

&lt;p&gt;然而，到目前为止我们只是讨论了&lt;strong&gt;不可变&lt;/strong&gt;的 &lt;code&gt;let&lt;/code&gt; 绑定 - 当我们的值可变时，规则会变得略微复杂。&lt;/p&gt;

&lt;h2 id=&#34;所有权-可变性&#34;&gt;所有权（可变性）&lt;/h2&gt;

&lt;p&gt;所有的值都可以被改变：我们只需要在变量名和 &lt;code&gt;let&lt;/code&gt; 之间加入 &lt;code&gt;mut&lt;/code&gt;。举个栗子，我们可以改变 bob 的一些地方，比如说名字：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let mut bob = Bob::new(&amp;quot;A&amp;quot;);
    bob.name = String::from_str(&amp;quot;mutant&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob &amp;quot;A&amp;quot;
del bob &amp;quot;mutant&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们以名字 “A” 创建了他，但是以名字 “mutant” 销毁了他。&lt;/p&gt;

&lt;p&gt;如果我们把这个值传给另一个函数 &lt;code&gt;mutate&lt;/code&gt;，我们同样可以把它赋值给 &lt;code&gt;mut&lt;/code&gt; 修饰的变量：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn mutate(value: Bob) {
    let mut bob = value;
    bob.name = String::from_str(&amp;quot;mutant&amp;quot;);
}

fn main() {
    mutate(Bob::new(&amp;quot;A&amp;quot;));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob &amp;quot;A&amp;quot;
del bob &amp;quot;mutant&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以，可以在任意时刻改变可变类型的值。&lt;/p&gt;

&lt;p&gt;一些需要了解的知识点：函数参数也可以变成用 mut 修饰的，因为它也是用于绑定的关键字，就像 let 一样。所以上面的例子可以被改写成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn mutate(mut value: Bob) {  // 在参数名前直接使用 mut
    value.name = String::from_str(&amp;quot;mutant&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;替换-mut-修饰的值&#34;&gt;替换 mut 修饰的值&lt;/h3&gt;

&lt;p&gt;如果我们重写 &lt;code&gt;mut&lt;/code&gt; 修饰的值会发生什么？来看看：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let mut bob = Bob::new(&amp;quot;A&amp;quot;);
    println!(&amp;quot;&amp;quot;);
    for &amp;amp;name in [&amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;].iter() {
        println!(&amp;quot;before overwrite&amp;quot;);
        bob = Bob::new(name);
        println!(&amp;quot;after overwrite&amp;quot;);
        println!(&amp;quot;&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob &amp;quot;A&amp;quot;

before overwrite
new bob &amp;quot;B&amp;quot;
del bob &amp;quot;A&amp;quot;
after overwrite

before overwrite
new bob &amp;quot;C&amp;quot;
del bob &amp;quot;B&amp;quot;
after overwrite

del bob &amp;quot;C&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;旧的值被销毁了。新的赋值会在作用域结尾处被销毁 &amp;ndash; 除非它被移动了或者是被再次重写。&lt;/p&gt;

&lt;h3 id=&#34;所有权-可变-规则&#34;&gt;所有权(可变)规则&lt;/h3&gt;

&lt;p&gt;相对于不可变性，可变性只有一条附加规则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;没有使用的返回值会被销毁&lt;/li&gt;
&lt;li&gt;所有被绑定到 &lt;code&gt;let&lt;/code&gt; 的值都会在函数结尾处被销毁，除非它被移动了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;被替换的值将被销毁&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很明显了，在 Rust 中，我们可以确定一个值没有所有者或者被引用。&lt;/p&gt;

&lt;h2 id=&#34;所有权系统的威力&#34;&gt;所有权系统的威力&lt;/h2&gt;

&lt;p&gt;刚开始这些所有权规则可能看起来有一些限制性，这仅仅是因为你使用了一套新的规则集。他们实际上并没有任何限制，只是给了我们另外一个基础设施去创建高级别架构。&lt;/p&gt;

&lt;p&gt;这些架构在别的语言中可能很难实现安全性。即使他们做到了安全性，他们也不能保证编译期就确定安全性。&lt;/p&gt;

&lt;p&gt;下面我们来概览一下它们，它们在一个独立的库中。&lt;/p&gt;

&lt;h3 id=&#34;内存分配&#34;&gt;内存分配&lt;/h3&gt;

&lt;p&gt;目前为止我们只讨论了类似 integer 的值，它们存活在&lt;strong&gt;栈&lt;/strong&gt;上。我们的测试人偶 &lt;code&gt;Bob&lt;/code&gt; 就是这样一个类型的值。一些流行的语言也会把值保持在栈上(比如 C# 中的 struct，C艹中非 new 实例化出来的值)，其他大部分语言都不是。&lt;/p&gt;

&lt;p&gt;相反的，一个新的构造对象实例(在很多语言中通过 &lt;code&gt;new&lt;/code&gt; 操作符创建的)在叫做&lt;strong&gt;堆内存&lt;/strong&gt;的地方创建。&lt;/p&gt;

&lt;p&gt;堆内存有很多优点。第一，它不受栈大小的限制。把一个大的结构放到栈上可能会马上溢出。第二，它的内存地址不会改变，不想栈地址。每次一个栈内存上面的值被移动或者拷贝，它所有的比特都会被拷贝到栈的另一个地址。当结构小的时候它是很有效率的(因为这样值会挨着嘛)，不过随着结构变大就会变的很慢。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Box&lt;/strong&gt; 解决了这个问题，处理方法是把我们创建的值移动到&lt;strong&gt;堆&lt;/strong&gt;上，然后在&lt;strong&gt;栈&lt;/strong&gt;上存一个指向堆地址的指针。&lt;/p&gt;

&lt;p&gt;举个栗子，我们像这样创建 &lt;code&gt;Bob&lt;/code&gt; 在堆内存上：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let bob = Box::new(Bob::new(&amp;quot;A&amp;quot;));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob A
del bob A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;bob&lt;/code&gt; 的返回值类型是 &lt;code&gt;Box&amp;lt;Bob&amp;gt;&lt;/code&gt;。泛型类型使 &lt;code&gt;Bob&lt;/code&gt; 的生命周期被 &lt;code&gt;Box&amp;lt;Bob&amp;gt;&lt;/code&gt; 管理，同时当 &lt;code&gt;Box&lt;/code&gt; 被删除时它也被随之删除。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Box&lt;/code&gt; 是不可拷贝的，其所有权机制跟上面提到的一样。当它在栈上的生命周期结束时，它的析构方法 &lt;code&gt;drop&lt;/code&gt; 被调用，随后立即调用 &lt;code&gt;Bob&lt;/code&gt; 的析构方法 &lt;code&gt;drop&lt;/code&gt;，同样会清理堆上的内存。&lt;/p&gt;

&lt;p&gt;这些看似琐碎的实现其实是重大的策略。如果我们跟其他语言的解决办法比较，它们大都做了两件事情中的一件。它们或者留给你自己清理内存(用一些讨厌的 &lt;code&gt;delete&lt;/code&gt; 语句，可能忘了调用或者调用多次)，或者依赖垃圾回收机制去跟踪内存指针，当这些指针不被引用时清理内存。&lt;/p&gt;

&lt;p&gt;在 Rust 中，所有权跟踪不会有运行时消耗，而且会在编译器确认正确性。这个简单的通过 &lt;code&gt;Box&lt;/code&gt; 的内存处理方案，小而美，而且经常已经足够用了。&lt;/p&gt;

&lt;p&gt;当它真的不够用时，其它的工具会来帮忙。&lt;/p&gt;

&lt;h2 id=&#34;垃圾回收&#34;&gt;垃圾回收&lt;/h2&gt;

&lt;p&gt;Rust 有足够的低级别(low-level)工具来用一个库的方式实现垃圾回收。最简单的方案已经存在于 Rust 中：基于引用计数(注意：不是自动引用计数)的垃圾回收。&lt;/p&gt;

&lt;p&gt;引用计数的解决方案很容易实现，不过它不是我们所说的真正意义上的垃圾回收。&lt;/p&gt;

&lt;p&gt;因此在 Rust 中我们给它起了个新名字叫做：*共享所有权*。&lt;code&gt;std::rc&lt;/code&gt; 库提供了在不容 &lt;code&gt;Rc&lt;/code&gt; 处理者(handler)中共享同一个值所有权的机制。只要有一个处理者作用于这个值上，这个值就会保持存活。&lt;/p&gt;

&lt;p&gt;举个栗子，我们可以创建一个被 &lt;code&gt;Rc&lt;/code&gt; 处理者所管理的 bob 实例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::rc::Rc;

fn main() {
    let bob = Rc::new(Bob::new(&amp;quot;A&amp;quot;));
    println!(&amp;quot;{:?}&amp;quot;, bob);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob A
Rc(bob A)
del bob A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://dwz.cn/APyxG&#34;&gt;自己试一下&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们可以改变 &lt;code&gt;black_hole&lt;/code&gt; 函数来接受一个 &lt;code&gt;Rc&amp;lt;Bob&amp;gt;&lt;/code&gt; 然后检查是否被销毁。但是我们可以更简单的让它接受&lt;strong&gt;任意类型&lt;/strong&gt;的 &lt;code&gt;T&lt;/code&gt; 然后实现 &lt;code&gt;Show&lt;/code&gt; 特质来方便打印。让我们来让它泛型话：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn black_hole&amp;lt;T&amp;gt;(value: T) where T: fmt::Show {
    println!(&amp;quot;imminent shrinkage {:?}&amp;quot;, value);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;工作方式一样，不过我们以后有新的类型改变时就不需要改变这个函数啦~&lt;/p&gt;

&lt;p&gt;现在，发送 &lt;code&gt;Rc&amp;lt;Bob&amp;gt;&lt;/code&gt; 到 black_hole！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
    let bob = Rc::new(Bob::new(&amp;quot;A&amp;quot;));
    black_hole(bob.clone());
    print!(&amp;quot;{:?}&amp;quot;, bob);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob A
imminent shrinkage Rc(bob A)
Rc(bob A)
del bob A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://dwz.cn/APxTk&#34;&gt;自己试一下&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;它在 black_hole 里存活了下来！不过它是怎么工作的？&lt;/p&gt;

&lt;p&gt;一旦被 &lt;code&gt;Rc&lt;/code&gt; 处理，那么其它地方只要有任何 &lt;code&gt;Rc&lt;/code&gt; &lt;strong&gt;克隆&lt;/strong&gt;存在，bob 就会一直存活。&lt;code&gt;Rc&lt;/code&gt; 在内部使用 &lt;code&gt;Box&lt;/code&gt; 把值同引用计数一起放到堆内存。&lt;/p&gt;

&lt;p&gt;每次一个新的处理者克隆被创建(通过调用 &lt;code&gt;clone&lt;/code&gt; 或者 &lt;code&gt;Rc&lt;/code&gt;)，引用计数就会加，当它生命周期结束时，引用计数会减。当引用计数达到 0 时，对象会被销毁，内存也会被释放。&lt;/p&gt;

&lt;p&gt;注意：上面所说的 &lt;code&gt;Rc&lt;/code&gt; 是不可变的。如果 &lt;code&gt;Bob&lt;/code&gt; 的内容需要被改变，他可以被附加的用 &lt;code&gt;RefCell&lt;/code&gt; 类型包装，这时就允许&lt;strong&gt;借用(borrow)&lt;/strong&gt;单个 bob 实例的引用。下面的例子中它将能在 &lt;code&gt;mutate&lt;/code&gt; 函数中被改变。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn mutate(bob: Rc&amp;lt;RefCell&amp;lt;Bob&amp;gt;&amp;gt;) {
    bob.borrow_mut().name = String::from_str(&amp;quot;mutant&amp;quot;);
}

fn main() {
    let bob = Rc::new(RefCell::new(Bob::new(&amp;quot;A&amp;quot;)));
    mutate(bob.clone());
    println!(&amp;quot;{:?}&amp;quot;, bob);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob A
Rc(RefCell { value: bob mutant })
del bob mutant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子证明了不同的低级别工具是如何以最小的代价来组合实现精确的垃圾回收。&lt;/p&gt;

&lt;p&gt;举个栗子，&lt;code&gt;Rc&lt;/code&gt; 只能被使用在同一线程中。不过另外一个类型 &lt;code&gt;Arc&lt;/code&gt; 可以被不同线程使用。一个可变的 &lt;code&gt;Rc&lt;/code&gt; 可能会被多个对象互相引用。不过，&lt;code&gt;Rc&lt;/code&gt; 可以被克隆成弱引用(&lt;code&gt;Weak&lt;/code&gt;) ，这样就不会参与引用计数了。更多的信息请查看&lt;a href=&#34;http://doc.rust-lang.org/std/rc/&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;最重要的是，更多高级的垃圾回收机制可以(即将)被实现，而且都是使用库的形式。&lt;/p&gt;

&lt;h2 id=&#34;并发&#34;&gt;并发&lt;/h2&gt;

&lt;p&gt;让我们看看 Rust 是如何改变我们使用线程的方式的。默认的模式是没有竞态数据。竞态数据不会发生是因为有很多特别的安全方式作用在线程上。原则上，你可以通过这些安全特性创建你自己的线程库，简单是因为所有权模型本身是线程安全的。&lt;/p&gt;

&lt;p&gt;考虑一下我们将一个 &lt;code&gt;Bob&lt;/code&gt;(可移动的) 和一个 &lt;code&gt;integet&lt;/code&gt;(可拷贝的)发送到一个新的 Rust 线程中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;use std::thread::Thread

fn main() {
    let bob = Bob::new(&amp;quot;A&amp;quot;);
    let i : i64 = 12;
    let guard = Thread::scoped(move || {
        println!(&amp;quot;From thread, {:?} and {:?}!&amp;quot;, bob, i);
    });
    println!(&amp;quot;waiting for thread to end&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;new bob A
waiting for thread to end
From thread, bob A and 12i64
del bob A
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://dwz.cn/APyoQ&#34;&gt;自己试一下&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;发生了什么？首先，我们创建了两个值：&lt;code&gt;bob&lt;/code&gt; 和 &lt;code&gt;i&lt;/code&gt;。然后我们通过 &lt;code&gt;Thread::scoped&lt;/code&gt; 创建了一个新的线程并且传入一个闭包让它执行。闭包捕获了我们的两个值。&lt;/p&gt;

&lt;p&gt;捕获对 &lt;code&gt;bob&lt;/code&gt; 和 &lt;code&gt;i&lt;/code&gt; 来说意味着不同的事。&lt;code&gt;bob&lt;/code&gt; 会移动到闭包中(对外部线程不可用)，&lt;code&gt;i&lt;/code&gt; 则会被拷贝到闭包中，不过它还会对外部线程可用。&lt;/p&gt;

&lt;p&gt;主线程会停下来等到新创建的线程执行完毕，执行完毕的标志是 &lt;code&gt;guard&lt;/code&gt; 达到生命周期的尽头(在这个例子中也就是 &lt;code&gt;main&lt;/code&gt; 函数的结尾)。&lt;/p&gt;

&lt;p&gt;你可能会指出这跟你之前使用线程没啥区别 &amp;ndash; 我们大家都知道如果没有某些同步机制是不可以随便在不同线程之间共享内存地址的。Rust 的不同之处在于它在编译期就强制了这一点。&lt;/p&gt;

&lt;p&gt;当然，我们能获取到 &lt;code&gt;guard&lt;/code&gt; 的返回值，也可以创建一个管道在不同线程中来发送和接受值。更多的信息请查看官方&lt;a href=&#34;http://doc.rust-lang.org/std/thread/&#34;&gt;线程文档&lt;/a&gt;，&lt;a href=&#34;http://doc.rust-lang.org/std/sync/mpsc/&#34;&gt;管道文档&lt;/a&gt;，和&lt;a href=&#34;http://doc.rust-lang.org/book/threads.html&#34;&gt;这本书&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;还有啥&#34;&gt;还有啥？&lt;/h2&gt;

&lt;p&gt;现在我们熟悉了 Rust 中的所有权系统，可以查看文档写安全代码啦。&lt;/p&gt;

&lt;p&gt;不过还有一部分还没有讲到：&lt;em&gt;借用系统&lt;/em&gt;(borrowing system)。&lt;/p&gt;

&lt;p&gt;在这个系列的第二部分中我们将学习为什么借用机制很有用，已经怎么最好的使用它。&lt;/p&gt;

&lt;p&gt;原文地址：&lt;a href=&#34;http://nercury.github.io/rust/guide/2015/01/19/ownership.html&#34;&gt;http://nercury.github.io/rust/guide/2015/01/19/ownership.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 buffered channel 实现线程安全的 pool</title>
      <link>https://se77en.cc/2014/%E4%BD%BF%E7%94%A8-buffered-channel-%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84-pool/</link>
      <pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2014/%E4%BD%BF%E7%94%A8-buffered-channel-%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84-pool/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;我们已经知道 Go 语言提供了 sync.Pool，但是做的不怎么好，所以有必要自己来实现一个 pool。&lt;/del&gt;
&lt;/p&gt;

&lt;h2 id=&#34;给我看代码&#34;&gt;给我看代码&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;type Pool struct {
  pool chan *Client
}

// 创建一个新的 pool
func NewPool(max int) *Pool {
  return &amp;amp;Pool{
    pool: make(chan *Client, max),
  }
}

// 从 pool 里借一个 Client
func (p *Pool) Borrow() *Client {
  var cl *Client
  select {
  case cl = &amp;lt;-p.pool:
  default:
    cl = newClient()
  }
  return cl
}

// 还回去
func (p *Pool) Return(cl *Client) {
  select {
  case p.pool &amp;lt;- cl:
  default:
    // let it go, let it go...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;现在&lt;strong&gt;&lt;em&gt;不要&lt;/em&gt;&lt;/strong&gt;使用 &lt;code&gt;sync.Pool&lt;/code&gt;&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 语言中的 Array，Slice，Map 和 Set</title>
      <link>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84-arrayslicemap-%E5%92%8C-set/</link>
      <pubDate>Mon, 30 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84-arrayslicemap-%E5%92%8C-set/</guid>
      <description>&lt;h2 id=&#34;array-数组&#34;&gt;Array(数组)&lt;/h2&gt;

&lt;h3 id=&#34;内部机制&#34;&gt;内部机制&lt;/h3&gt;

&lt;p&gt;在 Go 语言中数组是固定长度的数据类型，它包含相同类型的连续的元素，这些元素可以是内建类型，像数字和字符串，也可以是结构类型，元素可以通过唯一的索引值访问，从 0 开始。&lt;/p&gt;

&lt;p&gt;数组是很有价值的数据结构，因为它的内存分配是连续的，内存连续意味着可是让它在 CPU 缓存中待更久，所以迭代数组和移动元素都会非常迅速。
&lt;/p&gt;

&lt;h3 id=&#34;数组声明和初始化&#34;&gt;数组声明和初始化&lt;/h3&gt;

&lt;p&gt;通过指定数据类型和元素个数(数组长度)来声明数组。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 声明一个长度为5的整数数组
var array [5]int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦数组被声明了，那么它的数据类型跟长度都不能再被改变。如果你需要更多的元素，那么只能创建一个你想要长度的新的数组，然后把原有数组的元素拷贝过去。&lt;/p&gt;

&lt;p&gt;Go 语言中任何变量被声明时，都会被默认初始化为各自类型对应的 0 值，数组当然也不例外。当一个数组被声明时，它里面包含的每个元素都会被初始化为 0 值。&lt;/p&gt;

&lt;p&gt;一种快速创建和初始化数组的方法是使用数组字面值。数组字面值允许我们声明我们需要的元素个数并指定数据类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 声明一个长度为5的整数数组
// 初始化每个元素
array := [5]int{7, 77, 777, 7777, 77777}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你把长度写成 &lt;code&gt;...&lt;/code&gt;，Go 编译器将会根据你的元素来推导出长度：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 通过初始化值的个数来推导出数组容量
array := [...]int{7, 77, 777, 7777, 77777}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我们知道想要数组的长度，但是希望对指定位置元素初始化，可以这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 声明一个长度为5的整数数组
// 为索引为1和2的位置指定元素初始化
// 剩余元素为0值
array := [5]int{1: 77, 2: 777}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用数组&#34;&gt;使用数组&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;[]&lt;/code&gt; 操作符来访问数组元素：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array := [5]int{7, 77, 777, 7777, 77777}
// 改变索引为2的元素的值
array[2] = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以定义一个指针数组：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array := [5]*int{0: new(int), 1: new(int)}

// 为索引为0和1的元素赋值
*array[0] = 7
*array[1] = 77
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 Go 语言中数组是一个值，所以可以用它来进行赋值操作。一个数组可以被赋值给任意相同类型的数组：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var array1 [5]string
array2 := [5]string{&amp;quot;Red&amp;quot;, &amp;quot;Blue&amp;quot;, &amp;quot;Green&amp;quot;, &amp;quot;Yellow&amp;quot;, &amp;quot;Pink&amp;quot;}
array1 = array2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意数组的类型同时包括数组的长度和可以被存储的元素类型，数组类型完全相同才可以互相赋值，比如下面这样就不可以：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var array1 [4]string
array2 := [5]string{&amp;quot;Red&amp;quot;, &amp;quot;Blue&amp;quot;, &amp;quot;Green&amp;quot;, &amp;quot;Yellow&amp;quot;, &amp;quot;Pink&amp;quot;}
array1 = array2

// 编译器会报错
Compiler Error:
cannot use array2 (type [5]string) as type [4]string in assignment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;拷贝一个指针数组实际上是拷贝指针值，而不是指针指向的值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var array1 [3]*string
array2 := [3]*string{new(string), new(string), new(string)}
*array2[0] = &amp;quot;Red&amp;quot;
*array2[1] = &amp;quot;Blue&amp;quot;
*array2[2] = &amp;quot;Green&amp;quot;

array1 = array2
// 赋值完成后，两组指针数组指向同一字符串
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;多维数组&#34;&gt;多维数组&lt;/h3&gt;

&lt;p&gt;数组总是一维的，但是可以组合成多维的。多维数组通常用于有父子关系的数据或者是坐标系数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 声明一个二维数组
var array [4][2]int

// 使用数组字面值声明并初始化
array := [4][2]int{{10, 11}, {20, 21}, {30, 31}, {40, 41}}

// 指定外部数组索引位置初始化
array := [4][2]int{1: {20, 21}, 3: {40, 41}}

// 同时指定内外部数组索引位置初始化
array := [4][2]int{1: {0: 20}, 3: {1: 41}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样通过 &lt;code&gt;[]&lt;/code&gt; 操作符来访问数组元素：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var array [2][2]int

array[0][0] = 0
array[0][1] = 1
array[1][0] = 2
array[1][1] = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也同样的相同类型的多维数组可以相互赋值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var array1 = [2][2]int
var array2 = [2][2]int

array[0][0] = 0
array[0][1] = 1
array[1][0] = 2
array[1][1] = 3

array1 = array2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为数组是值，我们可以拷贝单独的维：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var array3 [2]int = array1[1]
var value int = array1[1][0]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;在函数中传递数组&#34;&gt;在函数中传递数组&lt;/h3&gt;

&lt;p&gt;在函数中传递数组是非常昂贵的行为，因为在函数之间传递变量永远是传递值，所以如果变量是数组，那么意味着传递整个数组，即使它很大很大很大。。。&lt;/p&gt;

&lt;p&gt;举个栗子，创建一个有百万元素的整形数组，在64位的机器上它需要8兆的内存空间，来看看我们声明它和传递它时发生了什么：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var array [1e6]int
foo(array)
func foo(array [1e6]int) {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每一次 &lt;code&gt;foo&lt;/code&gt; 被调用，8兆内存将会被分配在栈上。一旦函数返回，会弹栈并释放内存，每次都需要8兆空间。&lt;/p&gt;

&lt;p&gt;Go 语言当然不会这么傻，有更好的方法来在函数中传递数组，那就是传递指向数组的指针，这样每次只需要分配8字节内存：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var array [1e6]int
foo(&amp;amp;array)
func foo(array *[1e6]int){
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是注意如果你在函数中改变指针指向的值，那么原始数组的值也会被改变。幸运的是 &lt;code&gt;slice&lt;/code&gt;(切片)可以帮我们处理好这些问题，来一起看看。&lt;/p&gt;

&lt;h2 id=&#34;slice-切片&#34;&gt;Slice(切片)&lt;/h2&gt;

&lt;h3 id=&#34;内部机制和基础&#34;&gt;内部机制和基础&lt;/h3&gt;

&lt;p&gt;slice 是一种可以动态数组，可以按我们的希望增长和收缩。它的增长操作很容易使用，因为有内建的 &lt;code&gt;append&lt;/code&gt; 方法。我们也可以通过 &lt;strong&gt;&lt;em&gt;relice&lt;/em&gt;&lt;/strong&gt; 操作化简 slice。因为 slice 的底层内存是连续分配的，所以 slice 的索引，迭代和垃圾回收性能都很好。&lt;/p&gt;

&lt;p&gt;slice 是对底层数组的抽象和控制。它包含 Go 需要对底层数组管理的三种元数据，分别是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;指向底层数组的指针&lt;/li&gt;
&lt;li&gt;slice 中元素的长度&lt;/li&gt;
&lt;li&gt;slice 的容量(可供增长的最大值)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;创建和初始化&#34;&gt;创建和初始化&lt;/h3&gt;

&lt;p&gt;Go 中创建 slice 有很多种方法，我们一个一个来看。&lt;/p&gt;

&lt;p&gt;第一个方法是使用内建的函数 &lt;code&gt;make&lt;/code&gt;。当我们使用 &lt;code&gt;make&lt;/code&gt; 创建时，一个选项是可以指定 slice 的长度：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := make([]string, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果只指定了长度，那么容量默认等于长度。我们可以分别指定长度和容量：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := make([]int, 3, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当我们分别指定了长度和容量，我们创建的 slice 就可以拥有一开始并没有访问的底层数组的容量。上面代码的 slice 中，可以访问3个元素，但是底层数组有5个元素。两个与长度不相干的元素可以被 slice 来用。新创建的 slice 同样可以共享底层数组和已存在的容量。&lt;/p&gt;

&lt;p&gt;不允许创建长度大于容量的 slice：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := make([]int, 5, 3)

Compiler Error:
len larger than cap in make([]int)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;惯用的创建 slice 的方法是使用 slice 字面量。跟创建数组很类似，不过不用指定 &lt;code&gt;[]&lt;/code&gt;里的值。初始的长度和容量依赖于元素的个数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 创建一个字符串 slice
// 长度和容量都是 5
slice := []string{&amp;quot;Red&amp;quot;, &amp;quot;Blue&amp;quot;, &amp;quot;Green&amp;quot;, &amp;quot;Yellow&amp;quot;, &amp;quot;Pink&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在使用 slice 字面量创建 slice 时有一种方法可以初始化长度和容量，那就是初始化索引。下面是个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 创建一个字符串 slice
// 初始化一个有100个元素的空的字符串 slice
slice := []string{99: &amp;quot;&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nil-和-empty-slice&#34;&gt;nil 和 empty slice&lt;/h3&gt;

&lt;p&gt;有的时候我们需要创建一个 nil slice，创建一个 nil slice 的方法是声明它但不初始化它：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var slice []int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建一个 nil slice 是创建 slice 最基本的方法，很多标准库和内建函数都可以使用它。当我们想要表示一个并不存在的 slice 时它变得非常有用，比如一个返回 slice 的函数中发生异常的时候。&lt;/p&gt;

&lt;p&gt;创建 empty slice 的方法就是声明并初始化一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 使用 make 创建
silce := make([]int, 0)

// 使用 slice 字面值创建
slice := []int{}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;empty slice 包含0个元素并且底层数组没有分配存储空间。当我们想要表示一个空集合时它很有用处，比如一个数据库查询返回0个结果。&lt;/p&gt;

&lt;p&gt;不管我们用 nil slice 还是 empty slice，内建函数 &lt;code&gt;append&lt;/code&gt;，&lt;code&gt;len&lt;/code&gt;和&lt;code&gt;cap&lt;/code&gt;的工作方式完全相同。&lt;/p&gt;

&lt;h3 id=&#34;使用-slice&#34;&gt;使用 slice&lt;/h3&gt;

&lt;p&gt;为一个指定索引值的 slice 赋值跟之前数组赋值的做法完全相同。改变单个元素的值使用 &lt;code&gt;[]&lt;/code&gt; 操作符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := []int{10, 20, 30, 40, 50}
slice[1] = 25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以在底层数组上对一部分数据进行 slice 操作，来创建一个新的 slice：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 长度为5，容量为5
slice := []int{10, 20, 30, 40, 50}

// 长度为2，容量为4
newSlice := slice[1:3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 slice 操作之后我们得到了两个 slice，它们共享底层数组。但是它们能访问底层数组的范围却不同，newSlice 不能访问它头指针前面的值。&lt;/p&gt;

&lt;p&gt;计算任意 new slice 的长度和容量可以使用下面的公式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;对于 slice[i:j] 和底层容量为 k 的数组
长度：j - i
容量：k - i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必须再次明确一下现在是两个 slice 共享底层数组，因此只要有一个 slice 改变了底层数组的值，那么另一个也会随之改变：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := []int{10, 20, 30, 40, 50}
newSlice := slice[1:3]
newSlice[1] = 35
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改变 newSlice 的第二个元素的值，也会同样改变 slice 的第三个元素的值。&lt;/p&gt;

&lt;p&gt;一个 slice 只能访问它长度范围内的索引，试图访问超出长度范围的索引会产生一个运行时错误。容量只可以用来增长，它只有被合并到长度才可以被访问：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := []int{10, 20, 30, 40, 50}
newSlice := slice[1:3]
newSlice[3] = 45

Runtime Exception:
panic: runtime error: index out of range

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;容量可以被合并到长度里，通过内建的 &lt;code&gt;append&lt;/code&gt; 函数。&lt;/p&gt;

&lt;h3 id=&#34;slice-增长&#34;&gt;slice 增长&lt;/h3&gt;

&lt;p&gt;slice 比 数组的优势就在于它可以按照我们的需要增长，我们只需要使用 &lt;code&gt;append&lt;/code&gt; 方法，然后 Go 会为我们做好一切。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;append&lt;/code&gt; 方法时我们需要一个源 slice 和需要附加到它里面的值。当 &lt;code&gt;append&lt;/code&gt; 方法返回时，它返回一个新的 slice，&lt;code&gt;append&lt;/code&gt; 方法总是增长 slice 的长度，另一方面，如果源 slice 的容量足够，那么底层数组不会发生改变，否则会重新分配内存空间。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 创建一个长度和容量都为5的 slice
slice := []int{10, 20, 30, 40, 50}

// 创建一个新的 slice
newSlice := slice[1:3]

// 为新的 slice append 一个值
newSlice = append(newSlice, 60)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为 newSlice 有可用的容量，所以在 &lt;code&gt;append&lt;/code&gt; 操作之后 slice 索引为 3 的值也变成了 60，之前说过这是因为 slice 和 newSlice 共享同样的底层数组。&lt;/p&gt;

&lt;p&gt;如果没有足够可用的容量，&lt;code&gt;append&lt;/code&gt; 函数会创建一个新的底层数组，拷贝已存在的值和将要被附加的新值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 创建长度和容量都为4的 slice
slice := []int{10, 20, 30, 40}

// 附加一个新值到 slice，因为超出了容量，所以会创建新的底层数组
newSlice := append(slice, 50)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;append&lt;/code&gt; 函数重新创建底层数组时，容量会是现有元素的两倍(前提是元素个数小于1000)，如果元素个数超过1000，那么容量会以 1.25 倍来增长。&lt;/p&gt;

&lt;h3 id=&#34;slice-的第三个索引参数&#34;&gt;slice 的第三个索引参数&lt;/h3&gt;

&lt;p&gt;slice 还可以有第三个索引参数来限定容量，它的目的不是为了增加容量，而是提供了对底层数组的一个保护机制，以方便我们更好的控制 &lt;code&gt;append&lt;/code&gt; 操作，举个栗子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source := []string{&amp;quot;apple&amp;quot;, &amp;quot;orange&amp;quot;, &amp;quot;plum&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;grape&amp;quot;}

// 接着我们在源 slice 之上创建一个新的 slice
slice := source[2:3:4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新创建的 slice 长度为 1，容量为 2，可以看出长度和容量的计算公式也很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;对于 slice[i:j:k]  或者 [2:3:4]

长度： j - i       或者   3 - 2
容量： k - i       或者   4 - 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我们试图设置比可用容量更大的容量，会得到一个运行时错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := source[2:3:6]


Runtime Error:
panic: runtime error: slice bounds out of range
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;限定容量最大的用处是我们在创建新的 slice 时候限定容量与长度相同，这样以后再给新的 slice 增加元素时就会分配新的底层数组，而不会影响原有 slice 的值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source := []string{&amp;quot;apple&amp;quot;, &amp;quot;orange&amp;quot;, &amp;quot;plum&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;grape&amp;quot;}

// 接着我们在源 slice 之上创建一个新的 slice
// 并且设置长度和容量相同
slice := source[2:3:3]

// 添加一个新元素
slice = append(slice, &amp;quot;kiwi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有第三个索引参数限定，添加 kiwi 这个元素时就会覆盖掉 banana。&lt;/p&gt;

&lt;p&gt;内建函数 &lt;code&gt;append&lt;/code&gt; 是一个变参函数，意思就是你可以一次添加多个元素，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s1 := []int{1, 2}
s2 := []int{3, 4}

fmt.Printf(&amp;quot;%v\n&amp;quot;, append(s1, s2...))

Output:
[1 2 3 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;迭代-slice&#34;&gt;迭代 slice&lt;/h3&gt;

&lt;p&gt;slice 也是一种集合，所以可以被迭代，用 &lt;code&gt;for&lt;/code&gt; 配合 &lt;code&gt;range&lt;/code&gt; 来迭代：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := []int{10, 20, 30, 40, 50}

for index, value := range slice {
  fmt.Printf(&amp;quot;Index: %d  Value: %d\n&amp;quot;, index, value)
}

Output:
Index: 0  Value: 10
Index: 1  Value: 20
Index: 2  Value: 30
Index: 3  Value: 40
Index: 4  Value: 50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当迭代时 &lt;code&gt;range&lt;/code&gt; 关键字会返回两个值，第一个是索引值，第二个是索引位置值的拷贝。&lt;strong&gt;&lt;em&gt;注意&lt;/em&gt;&lt;/strong&gt;：返回的是值的拷贝而不是引用，如果我们把值的地址作为指针使用，会得到一个错误，来看看为啥：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := []int{10, 20, 30 ,40}

for index, value := range slice {
  fmt.Printf(&amp;quot;Value: %d  Value-Addr: %X  ElemAddr: %X\n&amp;quot;, value, &amp;amp;value, &amp;amp;slice[index])
}

Output:
Value: 10  Value-Addr: 10500168  ElemAddr: 1052E100
Value: 20  Value-Addr: 10500168  ElemAddr: 1052E104
Value: 30  Value-Addr: 10500168  ElemAddr: 1052E108
Value: 40  Value-Addr: 10500168  ElemAddr: 1052E10C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;value 变量的地址总是相同的因为它只是包含一个拷贝。如果想得到每个元素的真是地址可以使用 &amp;amp;slice[index]。&lt;/p&gt;

&lt;p&gt;如果不需要索引值，可以使用 &lt;code&gt;_&lt;/code&gt; 操作符来忽略它：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := []int{10, 20, 30, 40}

for _, value := range slice {
  fmt.Printf(&amp;quot;Value: %d\n&amp;quot;, value)
}


Output:
Value: 10
Value: 20
Value: 30
Value: 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;range&lt;/code&gt; 总是从开始一次遍历，如果你想控制遍历的step，就用传统的 &lt;code&gt;for&lt;/code&gt; 循环：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := []int{10, 20, 30, 40}

for index := 2; index &amp;amp;lt; len(slice); index++ {
  fmt.Printf(&amp;quot;Index: %d  Value: %d\n&amp;quot;, index, slice[index])
}


Output:
Index: 2  Value: 30
Index: 3  Value: 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同数组一样，另外两个内建函数 &lt;code&gt;len&lt;/code&gt; 和 &lt;code&gt;cap&lt;/code&gt; 分别返回 slice 的长度和容量。&lt;/p&gt;

&lt;h3 id=&#34;多维-slice&#34;&gt;多维 slice&lt;/h3&gt;

&lt;p&gt;也是同数组一样，slice 可以组合为多维的 slice：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := [][]int{{10}, {20, 30}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是使用 &lt;code&gt;append&lt;/code&gt; 方法时的行为，比如我们现在对 slice[0] 增加一个元素：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := [][]int{{10}, {20, 30}}
slice[0] = append(slice[0], 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么只有 slice[0] 会重新创建底层数组，slice[1] 则不会。&lt;/p&gt;

&lt;h3 id=&#34;在函数间传递-slice&#34;&gt;在函数间传递 slice&lt;/h3&gt;

&lt;p&gt;在函数间传递 slice 是很廉价的，因为 slice 相当于是指向底层数组的指针，让我们创建一个很大的 slice 然后传递给函数调用它：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slice := make([]int, 1e6)

slice = foo(slice)

func foo(slice []int) []int {
    ...
    return slice
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 64 位的机器上，slice 需要 24 字节的内存，其中指针部分需要 8 字节，长度和容量也分别需要 8 字节。&lt;/p&gt;

&lt;h2 id=&#34;map&#34;&gt;Map&lt;/h2&gt;

&lt;h3 id=&#34;内部机制-1&#34;&gt;内部机制&lt;/h3&gt;

&lt;p&gt;map 是一种无序的键值对的集合。map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。&lt;/p&gt;

&lt;p&gt;map 是一种集合，所以我们可以像迭代数组和 slice 那样迭代它。不过，map 是无序的，我们无法决定它的返回顺序，这是因为 map 是使用 hash 表来实现的。&lt;/p&gt;

&lt;p&gt;map 的 hash 表包含了一个桶集合(collection of buckets)。当我们存储，移除或者查找键值对(key/value pair)时，都会从选择一个桶开始。在映射(map)操作过程中，我们会把指定的键值(key)传递给 hash 函数(又称散列函数)。hash 函数的作用是生成索引，索引均匀的分布在所有可用的桶上。hash 表算法详见：&lt;a href=&#34;http://blog.csdn.net/v_JULY_v/article/details/6256463&#34;&gt;July的博客&amp;ndash;从头到尾彻底解析 hash 表算法&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;创建和初始化-1&#34;&gt;创建和初始化&lt;/h3&gt;

&lt;p&gt;Go 语言中有多种方法创建和初始化 map。我们可以使用内建函数 &lt;code&gt;make&lt;/code&gt; 也可以使用 map 字面值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 通过 make 来创建
dict := make(map[string]int)

// 通过字面值创建
dict := map[string]string{&amp;quot;Red&amp;quot;: &amp;quot;#da1337&amp;quot;, &amp;quot;Orange&amp;quot;: &amp;quot;#e95a22&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用字面值是创建 map 惯用的方法(&lt;a href=&#34;http://peter.bourgon.org/go-in-production/#formatting-and-style&#34;&gt;为什么不使用make&lt;/a&gt;)。初始化 map 的长度依赖于键值对的数量。&lt;/p&gt;

&lt;p&gt;map 的键可以是任意内建类型或者是 struct 类型，map 的值可以是使用 &lt;code&gt;==&lt;/code&gt;操作符的表达式。slice，function 和 包含 slice 的 struct 类型不可以作为 map 的键，否则会编译错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dict := map[[]string]int{}

Compiler Exception:
invalid map key type []string
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用-map&#34;&gt;使用 map&lt;/h3&gt;

&lt;p&gt;给 map 赋值就是指定合法类型的键，然后把值赋给键：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;colors := map[string]string{}
colors[&amp;quot;Red&amp;quot;] = &amp;quot;#da1337&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不初始化 map，那么就会创建一个 nil map。nil map 不能用来存放键值对，否则会报运行时错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var colors map[string]string
colors[&amp;quot;Red&amp;quot;] = &amp;quot;#da1337&amp;quot;

Runtime Error:
panic: runtime error: assignment to entry in nil map
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试 map 的键是否存在是 map 操作的重要部分，因为它可以让我们判断是否可以执行一个操作，或者是往 map 里缓存一个值。它也可以被用来比较两个 map 的键值对是否匹配或者缺失。&lt;/p&gt;

&lt;p&gt;从 map 里检索一个值有两种选择，我们可以同时检索值并且判断键是否存在：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;value, exists := colors[&amp;quot;Blue&amp;quot;]
if exists {
  fmt.Println(value)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另一种选择是只返回值，然后判断是否是零值来确定键是否存在。但是只有你确定零值是非法值的时候这招才管用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;value := colors[&amp;quot;Blue&amp;quot;]
if value != &amp;quot;&amp;quot; {
  fmt.Println(value)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当索引一个 map 取值时它总是会返回一个值，即使键不存在。上面的例子就返回了对应类型的零值。&lt;/p&gt;

&lt;p&gt;迭代一个 map 和迭代数组和 slice 是一样的，使用 &lt;code&gt;range&lt;/code&gt; 关键字，不过在迭代 map 时我们不使用 index/value 而使用 key/value 结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;colors := map[string]string{
    &amp;quot;AliceBlue&amp;quot;:   &amp;quot;#f0f8ff&amp;quot;,
    &amp;quot;Coral&amp;quot;:       &amp;quot;#ff7F50&amp;quot;,
    &amp;quot;DarkGray&amp;quot;:    &amp;quot;#a9a9a9&amp;quot;,
    &amp;quot;ForestGreen&amp;quot;: &amp;quot;#228b22&amp;quot;,
}

for key, value := range colors {
  fmt.Printf(&amp;quot;Key: %s  Value: %s\n&amp;quot;, key, value)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我们想要从 map 中移除一个键值对，使用内建函数 &lt;code&gt;delete&lt;/code&gt;(要是也能返回移除是否成功就好了，哎。。。)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delete(colors, &amp;quot;Coral&amp;quot;)

for key, value := range colors {
  fmt.Println(&amp;quot;Key: %s  Value: %s\n&amp;quot;, key, value)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;在函数间传递-map&#34;&gt;在函数间传递 map&lt;/h3&gt;

&lt;p&gt;在函数间传递 map 不是传递 map 的拷贝。所以如果我们在函数中改变了 map，那么所有引用 map 的地方都会改变：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  colors := map[string]string{
     &amp;quot;AliceBlue&amp;quot;:   &amp;quot;#f0f8ff&amp;quot;,
     &amp;quot;Coral&amp;quot;:       &amp;quot;#ff7F50&amp;quot;,
     &amp;quot;DarkGray&amp;quot;:    &amp;quot;#a9a9a9&amp;quot;,
     &amp;quot;ForestGreen&amp;quot;: &amp;quot;#228b22&amp;quot;,
  }

  for key, value := range colors {
      fmt.Printf(&amp;quot;Key: %s  Value: %s\n&amp;quot;, key, value)
  }

  removeColor(colors, &amp;quot;Coral&amp;quot;)

  for key, value := range colors {
      fmt.Printf(&amp;quot;Key: %s  Value: %s\n&amp;quot;, key, value)
  }
}

func removeColor(colors map[string]string, key string) {
    delete(colors, key)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行会得到以下结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Key: AliceBlue Value: #F0F8FF
Key: Coral Value: #FF7F50
Key: DarkGray Value: #A9A9A9
Key: ForestGreen Value: #228B22
    
Key: AliceBlue Value: #F0F8FF
Key: DarkGray Value: #A9A9A9
Key: ForestGreen Value: #228B22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出来传递 map 也是十分廉价的，类似 slice。&lt;/p&gt;

&lt;h2 id=&#34;set&#34;&gt;Set&lt;/h2&gt;

&lt;p&gt;Go 语言本身是不提供 set 的，但是我们可以自己实现它，下面就来试试：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import(
  &amp;quot;fmt&amp;quot;
  &amp;quot;sync&amp;quot;
)

type Set struct {
  m map[int]bool
  sync.RWMutex
}

func New() *Set {
  return &amp;amp;Set{
    m: map[int]bool{},
  }
}

func (s *Set) Add(item int) {
  s.Lock()
  defer s.Unlock()
  s.m[item] = true
}

func (s *Set) Remove(item int) {
  s.Lock()
  s.Unlock()
  delete(s.m, item)
}

func (s *Set) Has(item int) bool {
  s.RLock()
  defer s.RUnlock()
  _, ok := s.m[item]
  return ok
}

func (s *Set) Len() int {
  return len(s.List())
}

func (s *Set) Clear() {
  s.Lock
  defer s.Unlock()
  s.m = map[int]bool{}
}

func (s *Set) IsEmpty() bool {
  if s.Len() == 0 {
    return true
  }
  return false
}

func (s *Set) List() []int {
  s.RLock()
  defer s.RUnlock()
  list := []int{}
  for item := range s.m {
    list = append(list, item)
  }
  return list
}

func main() {
  // 初始化
  s := New()
  
  s.Add(1)
  s.Add(1)
  s.Add(2)

  s.Clear()
  if s.IsEmpty() {
    fmt.Println(&amp;quot;0 item&amp;quot;)
  }
  
  s.Add(1)
  s.Add(2)
  s.Add(3)
  
  if s.Has(2) {
    fmt.Println(&amp;quot;2 does exist&amp;quot;)
  }
  
  s.Remove(2)
  s.Remove(3)
  fmt.Println(&amp;quot;list of all items&amp;quot;, S.List())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意我们只是使用了 int 作为键，你可以自己实现用 interface{} 作为键，做成更通用的 Set，另外，这个实现是线程安全的。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;数组是 slice 和 map 的底层结构。&lt;/li&gt;
&lt;li&gt;slice 是 Go 里面惯用的集合数据的方法，map 则是用来存储键值对。&lt;/li&gt;
&lt;li&gt;内建函数 &lt;code&gt;make&lt;/code&gt; 用来创建 slice 和 map，并且为它们指定长度和容量等等。slice 和 map 字面值也可以做同样的事。&lt;/li&gt;
&lt;li&gt;slice 有容量的约束，不过可以通过内建函数 &lt;code&gt;append&lt;/code&gt; 来增加元素。&lt;/li&gt;
&lt;li&gt;map 没有容量一说，所以也没有任何增长限制。&lt;/li&gt;
&lt;li&gt;内建函数 &lt;code&gt;len&lt;/code&gt; 可以用来获得 slice 和 map 的长度。&lt;/li&gt;
&lt;li&gt;内建函数 &lt;code&gt;cap&lt;/code&gt; 只能作用在 slice 上。&lt;/li&gt;
&lt;li&gt;可以通过组合方式来创建多维数组和 slice。map 的值可以是 slice 或者另一个 map。slice 不能作为 map 的键。&lt;/li&gt;
&lt;li&gt;在函数之间传递 slice 和 map 是相当廉价的，因为他们不会传递底层数组的拷贝。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Go 语言中的方法，接口和嵌入类型</title>
      <link>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B5%8C%E5%85%A5%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B5%8C%E5%85%A5%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;在 Go 语言中，如果一个结构体和一个嵌入字段同时实现了相同的接口会发生什么呢？我们猜一下，可能有两个问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;编译器会因为我们同时有两个接口实现而报错吗？&lt;/li&gt;
&lt;li&gt;如果编译器接受这样的定义，那么当接口调用时编译器要怎么确定该使用哪个实现？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在写了一些测试代码并认真深入的读了一下标准之后，我发现了一些有意思的东西，而且觉得很有必要分享出来，那么让我们先从 Go 语言中的方法开始说起。
&lt;/p&gt;

&lt;h2 id=&#34;方法&#34;&gt;方法&lt;/h2&gt;

&lt;p&gt;Go 语言中同时有函数和方法。一个方法就是一个包含了&lt;a href=&#34;http://golang.org/ref/spec#Method_declarations&#34;&gt;接受者&lt;/a&gt;的函数，接受者可以是&lt;a href=&#34;http://golang.org/ref/spec#Types&#34;&gt;命名类型&lt;/a&gt;或者&lt;a href=&#34;http://golang.org/ref/spec#Struct_types&#34;&gt;结构体&lt;/a&gt;类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集。&lt;/p&gt;

&lt;p&gt;下面定义一个结构体类型和该类型的一个方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type User struct {
  Name  string
  Email string
}

func (u User) Notify() error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先我们定义了一个叫做 &lt;code&gt;User&lt;/code&gt; 的结构体类型，然后定义了一个该类型的方法叫做 &lt;code&gt;Notify&lt;/code&gt;，该方法的接受者是一个 &lt;code&gt;User&lt;/code&gt; 类型的值。要调用 &lt;code&gt;Notify&lt;/code&gt; 方法我们需要一个 &lt;code&gt;User&lt;/code&gt; 类型的值或者指针：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// User 类型的值可以调用接受者是值的方法
damon := User{&amp;quot;AriesDevil&amp;quot;, &amp;quot;ariesdevil@xxoo.com&amp;quot;}
damon.Notify()

// User 类型的指针同样可以调用接受者是值的方法
alimon := &amp;amp;User{&amp;quot;A-limon&amp;quot;, &amp;quot;alimon@ooxx.com&amp;quot;}
alimon.Notify()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这个例子中当我们使用指针时，Go &lt;a href=&#34;http://golang.org/ref/spec#Calls&#34;&gt;调整&lt;/a&gt;和解引用指针使得调用可以被执行。&lt;strong&gt;&lt;em&gt;注意&lt;/em&gt;&lt;/strong&gt;，当接受者不是一个指针时，该方法操作对应接受者的值的副本(意思就是即使你使用了指针调用函数，但是函数的接受者是值类型，所以函数内部操作还是对副本的操作，而不是指针操作，参见：&lt;a href=&#34;http://play.golang.org/p/DBhWU0p1Pv&#34;&gt;http://play.golang.org/p/DBhWU0p1Pv&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;我们可以修改 &lt;code&gt;Notify&lt;/code&gt; 方法，让它的接受者使用指针类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (u *User) Notify() error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再来一次之前的调用(&lt;strong&gt;&lt;em&gt;注意&lt;/em&gt;&lt;/strong&gt;：当接受者是指针时，即使用值类型调用那么函数内部也是对指针的操作，参见：&lt;a href=&#34;http://play.golang.org/p/SYBb4xPfPh&#34;&gt;http://play.golang.org/p/SYBb4xPfPh&lt;/a&gt;)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// User 类型的值可以调用接受者是指针的方法
damon := User{&amp;quot;AriesDevil&amp;quot;, &amp;quot;ariesdevil@xxoo.com&amp;quot;}
damon.Notify()

// User 类型的指针同样可以调用接受者是指针的方法
alimon := &amp;amp;User{&amp;quot;A-limon&amp;quot;, &amp;quot;alimon@ooxx.com&amp;quot;}
alimon.Notify()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你不清楚到底什么时候该使用值，什么时候该使用指针作为接受者，你可以去看一下&lt;a href=&#34;http://se77en.cc/2014/05/04/choose-whether-to-use-a-value-or-pointer-receiver-on-methods/&#34;&gt;这篇介绍&lt;/a&gt;。这篇文章同时还包含了社区约定的接受者该如何命名。&lt;/p&gt;

&lt;h2 id=&#34;接口&#34;&gt;接口&lt;/h2&gt;

&lt;p&gt;Go 语言中的&lt;a href=&#34;http://golang.org/doc/effective_go.html#interfaces&#34;&gt;接口&lt;/a&gt;很特别，而且提供了难以置信的一系列灵活性和抽象性。它们指定一个特定类型的值和指针表现为特定的方式。从语言角度看，接口是一种类型，它指定一个&lt;a href=&#34;http://golang.org/ref/spec#Method_sets&#34;&gt;方法集&lt;/a&gt;，所有方法为&lt;a href=&#34;http://golang.org/ref/spec#Interface_types&#34;&gt;接口类型&lt;/a&gt;就被认为是该接口。&lt;/p&gt;

&lt;p&gt;下面定义一个接口：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Notifier interface {
  Notify() error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们定义了一个叫做 &lt;code&gt;Notifier&lt;/code&gt; 的接口并包含一个 &lt;code&gt;Notify&lt;/code&gt; 方法。当一个接口只包含一个方法时，按照 Go 语言的&lt;a href=&#34;http://golang.org/doc/effective_go.html#interface-names&#34;&gt;约定&lt;/a&gt;命名该接口时添加 &lt;code&gt;-er&lt;/code&gt; 后缀。这个约定很有用，特别是接口和方法具有相同名字和意义的时候。&lt;/p&gt;

&lt;p&gt;我们可以在接口中定义尽可能多的方法，不过在 Go 语言标准库中，你很难找到一个接口包含两个以上的方法。&lt;/p&gt;

&lt;h2 id=&#34;实现接口&#34;&gt;实现接口&lt;/h2&gt;

&lt;p&gt;当涉及到我们该怎么让我们的类型实现接口时，Go 语言是特别的一个。Go 语言不需要我们显式的实现类型的接口。如果一个接口里的所有方法都被我们的类型实现了，那么我们就说该类型实现了该接口。&lt;/p&gt;

&lt;p&gt;让我们继续之前的例子，定义一个函数来接受任意一个实现了接口 &lt;code&gt;Notifier&lt;/code&gt; 的类型的值或者指针：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func SendNotification(notify Notifier) error {
  return notify.Notify()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SendNotification&lt;/code&gt; 函数调用 &lt;code&gt;Notify&lt;/code&gt; 方法，这个方法被传入函数的一个值或者指针实现。这样一来一个函数就可以被用来执行任意一个实现了该接口的值或者指针的指定的行为。&lt;/p&gt;

&lt;p&gt;用我们的 &lt;code&gt;User&lt;/code&gt; 类型来实现该接口并且传入一个 &lt;code&gt;User&lt;/code&gt; 类型的值来调用 &lt;code&gt;SendNotification&lt;/code&gt; 方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (u *User) Notify() error {
  log.Printf(&amp;quot;User: Sending User Email To %s&amp;lt;%s&amp;gt;\n&amp;quot;,
      u.Name,
      u.Email)
  return nil
}

func main() {
  user := User{
    Name:  &amp;quot;AriesDevil&amp;quot;,
    Email: &amp;quot;ariesdevil@xxoo.com&amp;quot;,
  }
  
  SendNotification(user)
}

// Output:
cannot use user (type User) as type Notifier in function argument:
User does not implement Notifier (Notify method has pointer receiver)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细代码：&lt;a href=&#34;http://play.golang.org/p/KG8-Qb7gqM&#34;&gt;http://play.golang.org/p/KG8-Qb7gqM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;为什么编译器不考虑我们的值是实现该接口的类型？接口的调用规则是建立在这些方法的接受者和接口如何被调用的基础上。下面的是语言规范里定义的规则，这些规则用来说明是否我们一个类型的值或者指针&lt;a href=&#34;http://golang.org/ref/spec#Method_sets&#34;&gt;实现了&lt;/a&gt;该接口：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;类型 &lt;code&gt;*T&lt;/code&gt; 的可调用方法集包含接受者为 &lt;code&gt;*T&lt;/code&gt; 或 &lt;code&gt;T&lt;/code&gt; 的所有方法集&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这条规则说的是如果我们用来调用特定接口方法的接口变量是一个指针类型，那么方法的接受者可以是值类型也可以是指针类型。显然我们的例子不符合该规则，因为我们传入 &lt;code&gt;SendNotification&lt;/code&gt; 函数的接口变量是一个值类型。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;类型 &lt;code&gt;T&lt;/code&gt; 的可调用方法集包含接受者为 &lt;code&gt;T&lt;/code&gt; 的所有方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这条规则说的是如果我们用来调用特定接口方法的接口变量是一个值类型，那么方法的接受者必须也是值类型该方法才可以被调用。显然我们的例子也不符合这条规则，因为我们 &lt;code&gt;Notify&lt;/code&gt; 方法的接受者是一个指针类型。&lt;/p&gt;

&lt;p&gt;语言规范里只有这两条规则，我通过这两条规则得出了符合我们例子的规则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;类型 &lt;code&gt;T&lt;/code&gt; 的可调用方法集不包含接受者为 &lt;code&gt;*T&lt;/code&gt; 的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们碰巧赶上了我推断出的这条规则，所以编译器会报错。&lt;code&gt;Notify&lt;/code&gt; 方法使用指针类型作为接受者而我们却通过值类型来调用该方法。解决办法也很简单，我们只需要传入 &lt;code&gt;User&lt;/code&gt; 值的地址到 &lt;code&gt;SendNotification&lt;/code&gt; 函数就好了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  user := &amp;amp;User{
    Name:  &amp;quot;AriesDevil&amp;quot;,
    Email: &amp;quot;ariesdevil@xxoo.com&amp;quot;,
  }
  
  SendNotification(user)
}

// Output:
User: Sending User Email To AriesDevil&amp;lt;ariesdevil@xxoo.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细代码：&lt;a href=&#34;http://play.golang.org/p/kEKzyTfLjA&#34;&gt;http://play.golang.org/p/kEKzyTfLjA&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;嵌入类型&#34;&gt;嵌入类型&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Struct_types&#34;&gt;结构体类型&lt;/a&gt;可以包含匿名或者嵌入字段。也叫做嵌入一个类型。当我们嵌入一个类型到结构体中时，该类型的名字充当了嵌入字段的字段名。&lt;/p&gt;

&lt;p&gt;下面定义一个新的类型然后把我们的 &lt;code&gt;User&lt;/code&gt; 类型嵌入进去：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Admin struct {
  User
  Level  string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们定义了一个新类型 &lt;code&gt;Admin&lt;/code&gt; 然后把 &lt;code&gt;User&lt;/code&gt; 类型嵌入进去，注意这个不叫继承而叫组合。 &lt;code&gt;User&lt;/code&gt; 类型跟 &lt;code&gt;Admin&lt;/code&gt; 类型没有关系。&lt;/p&gt;

&lt;p&gt;我们来改变一下 &lt;code&gt;main&lt;/code&gt; 函数，创建一个 &lt;code&gt;Admin&lt;/code&gt; 类型的变量并把变量的地址传入 &lt;code&gt;SendNotification&lt;/code&gt; 函数中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  admin := &amp;amp;Admin{
    User: User{
      Name:  &amp;quot;AriesDevil&amp;quot;,
      Email: &amp;quot;ariesdevil@xxoo.com&amp;quot;,
    },
    Level: &amp;quot;master&amp;quot;,
  }
  
  SendNotification(admin)
}

// Output
User: Sending User Email To AriesDevil&amp;lt;ariesdevil@xxoo.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细代码：&lt;a href=&#34;http://play.golang.org/p/ivzzzk78TC&#34;&gt;http://play.golang.org/p/ivzzzk78TC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;事实证明，我们可以 &lt;code&gt;Admin&lt;/code&gt; 类型的一个指针来调用 &lt;code&gt;SendNotification&lt;/code&gt; 函数。现在 &lt;code&gt;Admin&lt;/code&gt; 类型也通过来自嵌入的 &lt;code&gt;User&lt;/code&gt; 类型的&lt;strong&gt;&lt;em&gt;方法提升&lt;/em&gt;&lt;/strong&gt;实现了该接口。&lt;/p&gt;

&lt;p&gt;如果 &lt;code&gt;Admin&lt;/code&gt; 类型包含了 &lt;code&gt;User&lt;/code&gt; 类型的字段和方法，那么它们在结构体中的关系是怎么样的呢？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当我们&lt;a href=&#34;http://golang.org/doc/effective_go.html#embedding&#34;&gt;嵌入&lt;/a&gt;一个类型，这个类型的方法就变成了外部类型的方法，但是当它被调用时，方法的接受者是内部类型(嵌入类型)，而非外部类型。&amp;ndash; Effective Go&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因此嵌入类型的名字充当着字段名，同时嵌入类型作为内部类型存在，我们可以使用下面的调用方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;admin.User.Notify()

// Output
User: Sending User Email To AriesDevil&amp;lt;ariesdevil@xxoo.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细代码：&lt;a href=&#34;http://play.golang.org/p/0WL_5Q6mao&#34;&gt;http://play.golang.org/p/0WL_5Q6mao&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这儿我们通过类型名称来访问内部类型的字段和方法。然而，这些字段和方法也同样被提升到了外部类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;admin.Notify()

// Output
User: Sending User Email To AriesDevil&amp;lt;ariesdevil@xxoo.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细代码：&lt;a href=&#34;http://play.golang.org/p/2snaaJojRo&#34;&gt;http://play.golang.org/p/2snaaJojRo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;所以通过外部类型来调用 &lt;code&gt;Notify&lt;/code&gt; 方法，本质上是内部类型的方法。&lt;/p&gt;

&lt;p&gt;下面是 Go 语言中内部类型&lt;a href=&#34;http://golang.org/ref/spec#Method_sets&#34;&gt;方法集提升&lt;/a&gt;的规则：&lt;/p&gt;

&lt;p&gt;给定一个结构体类型 &lt;code&gt;S&lt;/code&gt; 和一个命名为 &lt;code&gt;T&lt;/code&gt; 的类型，方法提升像下面规定的这样被包含在结构体方法集中：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;S&lt;/code&gt; 包含一个匿名字段 &lt;code&gt;T&lt;/code&gt;，&lt;code&gt;S&lt;/code&gt; 和 &lt;code&gt;*S&lt;/code&gt; 的方法集都包含接受者为 &lt;code&gt;T&lt;/code&gt; 的方法提升。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这条规则说的是当我们嵌入一个类型，嵌入类型的接受者为值类型的方法将被提升，可以被外部类型的值和指针调用。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对于 &lt;code&gt;*S&lt;/code&gt; 类型的方法集包含接受者为 &lt;code&gt;*T&lt;/code&gt; 的方法提升&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这条规则说的是当我们嵌入一个类型，可以被外部类型的指针调用的方法集只有嵌入类型的接受者为指针类型的方法集，也就是说，当外部类型使用指针调用内部类型的方法时，只有接受者为指针类型的内部类型方法集将被提升。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;S&lt;/code&gt; 包含一个匿名字段 &lt;code&gt;*T&lt;/code&gt;，&lt;code&gt;S&lt;/code&gt; 和 &lt;code&gt;*S&lt;/code&gt; 的方法集都包含接受者为 &lt;code&gt;T&lt;/code&gt; 或者 &lt;code&gt;*T&lt;/code&gt; 的方法提升&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这条规则说的是当我们嵌入一个类型的指针，嵌入类型的接受者为值类型或指针类型的方法将被提升，可以被外部类型的值或者指针调用。&lt;/p&gt;

&lt;p&gt;这就是语言规范里方法提升中仅有的三条规则。&lt;/p&gt;

&lt;h2 id=&#34;回答开头的问题&#34;&gt;回答开头的问题&lt;/h2&gt;

&lt;p&gt;现在我们可以写程序来回答开头提出的两个问题了，首先我们让 &lt;code&gt;Admin&lt;/code&gt; 类型实现 &lt;code&gt;Notifier&lt;/code&gt; 接口：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (a *Admin) Notify() error {
  log.Printf(&amp;quot;Admin: Sending Admin Email To %s&amp;lt;%s&amp;gt;\n&amp;quot;,
      a.Name,
      a.Email)
      
  return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Admin&lt;/code&gt; 类型实现的接口显示一条 admin 方面的信息。当我们使用 &lt;code&gt;Admin&lt;/code&gt; 类型的指针去调用函数 &lt;code&gt;SendNotification&lt;/code&gt; 时，这将帮助我们确定到底是哪个接口实现被调用了。&lt;/p&gt;

&lt;p&gt;现在创建一个 &lt;code&gt;Admin&lt;/code&gt; 类型的值并把它的地址传入 &lt;code&gt;SendNotification&lt;/code&gt; 函数，来看看发生了什么：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  admin := &amp;amp;Admin{
    User: User{
      Name:  &amp;quot;AriesDevil&amp;quot;,
      Email: &amp;quot;ariesdevil@xxoo.com&amp;quot;,
    },
    Level: &amp;quot;master&amp;quot;,
  }
  
  SendNotification(admin)
}

// Output
Admin: Sending Admin Email To AriesDevil&amp;lt;ariesdevil@xxoo.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细代码：&lt;a href=&#34;http://play.golang.org/p/JGhFaJnGpS&#34;&gt;http://play.golang.org/p/JGhFaJnGpS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;预料之中，&lt;code&gt;Admin&lt;/code&gt; 类型的接口实现被 &lt;code&gt;SendNotification&lt;/code&gt; 函数调用。现在我们用外部类型来调用 &lt;code&gt;Notify&lt;/code&gt; 方法会发生什么呢：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;admin.Notify()

// Output
Admin: Sending Admin Email To AriesDevil&amp;lt;ariesdevil@xxoo.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细代码：&lt;a href=&#34;http://play.golang.org/p/EGqK6DwBOi&#34;&gt;http://play.golang.org/p/EGqK6DwBOi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们得到了 &lt;code&gt;Admin&lt;/code&gt; 类型的接口实现的输出。&lt;code&gt;User&lt;/code&gt; 类型的接口实现不被提升到外部类型了。&lt;/p&gt;

&lt;p&gt;现在我们有了足够的依据来回答问题了：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;编译器会因为我们同时有两个接口实现而报错吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不会，因为当我们使用嵌入类型时，类型名充当了字段名。嵌入类型作为结构体的内部类型包含了自己的字段和方法，且具有唯一的名字。所以我们可以有同一接口的内部实现和外部实现。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果编译器接受这样的定义，那么当接口调用时编译器要怎么确定该使用哪个实现？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果外部类型包含了符合要求的接口实现，它将会被使用。否则，通过方法提升，任何内部类型的接口实现可以直接被外部类型使用。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;在 Go 语言中，方法，接口和嵌入类型一起工作方式是独一无二的。这些特性可以帮助我们像面向对象那样组织结构然后达到同样的目的，并且没有其它复杂的东西。用本文中谈到的语言特色，我们可以以极少的代码来构建抽象和可伸缩性的框架。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 语言方法接受者类型的选择</title>
      <link>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%97%E8%80%85%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%80%89%E6%8B%A9/</link>
      <pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%97%E8%80%85%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%80%89%E6%8B%A9/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;很多人(特别是新手)在写 Go 语言代码时经常会问一个问题，那就是一个方法的接受者类型到底应该是值类型还是指针类型呢，Go 的 wiki 上对这点做了很好的解释，我来翻译一下。
&lt;/p&gt;

&lt;h2 id=&#34;何时使用值类型&#34;&gt;何时使用值类型&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;如果接受者是一个 &lt;code&gt;map&lt;/code&gt;，&lt;code&gt;func&lt;/code&gt; 或者 &lt;code&gt;chan&lt;/code&gt;，使用值类型(因为它们本身就是引用类型)。&lt;/li&gt;
&lt;li&gt;如果接受者是一个 &lt;code&gt;slice&lt;/code&gt;，并且方法不执行 &lt;code&gt;reslice&lt;/code&gt; 操作，也不重新分配内存给 &lt;code&gt;slice&lt;/code&gt;，使用值类型。&lt;/li&gt;
&lt;li&gt;如果接受者是一个小的数组或者原生的值类型结构体类型(比如 &lt;code&gt;time.Time&lt;/code&gt; 类型)，而且没有可修改的字段和指针，又或者接受者是一个简单地基本类型像是 &lt;code&gt;int&lt;/code&gt; 和 &lt;code&gt;string&lt;/code&gt;，使用值类型就好了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个值类型的接受者可以减少一定数量的垃圾生成，如果一个值被传入一个值类型接受者的方法，一个栈上的拷贝会替代在堆上分配内存(但不是保证一定成功)，所以在没搞明白代码想干什么之前，别因为这个原因而选择值类型接受者。&lt;/p&gt;

&lt;h2 id=&#34;何时使用指针类型&#34;&gt;何时使用指针类型&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;如果方法需要修改接受者，接受者必须是指针类型。&lt;/li&gt;
&lt;li&gt;如果接受者是一个包含了 &lt;code&gt;sync.Mutex&lt;/code&gt; 或者类似同步字段的结构体，接受者必须是指针，这样可以避免拷贝。&lt;/li&gt;
&lt;li&gt;如果接受者是一个大的结构体或者数组，那么指针类型接受者更有效率。(多大算大呢？假设把接受者的所有元素作为参数传给方法，如果你觉得参数有点多，那么它就是大)。&lt;/li&gt;
&lt;li&gt;从此方法中并发的调用函数和方法时，接受者可以被修改吗？一个值类型的接受者当方法调用时会创建一份拷贝，所以外部的修改不能作用到这个接受者上。如果修改必须被原始的接受者可见，那么接受者必须是指针类型。&lt;/li&gt;
&lt;li&gt;如果接受者是一个结构体，数组或者 &lt;code&gt;slice&lt;/code&gt;，它们中任意一个元素是指针类型而且可能被修改，建议使用指针类型接受者，这样会增加程序的可读性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当你看完这个还是有疑虑，还是不知道该使用哪种接受者，那么记住使用指针接受者。&lt;/p&gt;

&lt;h2 id=&#34;关于接受者的命名&#34;&gt;关于接受者的命名&lt;/h2&gt;

&lt;p&gt;社区约定的接受者命名是类型的一个或两个字母的缩写(像 &lt;code&gt;c&lt;/code&gt; 或者 &lt;code&gt;cl&lt;/code&gt; 对于 &lt;code&gt;Client&lt;/code&gt;)。不要使用泛指的名字像是 &lt;code&gt;me&lt;/code&gt;，&lt;code&gt;this&lt;/code&gt; 或者 &lt;code&gt;self&lt;/code&gt;，也不要使用过度描述的名字，最后，如果你在一个地方使用了 &lt;code&gt;c&lt;/code&gt;，那么就不要在别的地方使用 &lt;code&gt;cl&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 语言中的 new() 和 make() 的区别</title>
      <link>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84-new-%E5%92%8C-make-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84-new-%E5%92%8C-make-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;

&lt;p&gt;Go 语言中的 &lt;code&gt;new&lt;/code&gt; 和 &lt;code&gt;make&lt;/code&gt; 一直是新手比较容易混淆的东西，咋一看很相似。不过解释两者之间的不同也非常容易。
&lt;/p&gt;

&lt;h2 id=&#34;new-的主要特性&#34;&gt;new 的主要特性&lt;/h2&gt;

&lt;p&gt;首先 &lt;code&gt;new&lt;/code&gt; 是内建函数，你可以从 &lt;a href=&#34;http://golang.org/pkg/builtin/#new&#34;&gt;http://golang.org/pkg/builtin/#new&lt;/a&gt; 这儿看到它，它的定义也很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func new(Type) *Type
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;官方文档对于它的描述是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;内建函数 &lt;code&gt;new&lt;/code&gt; 用来分配内存，它的第一个参数是一个类型，不是一个值，它的返回值是一个指向新分配类型零值的指针&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据这段描述，我们可以自己实现一个类似 &lt;code&gt;new&lt;/code&gt; 的功能：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func newInt() *int {
  var i int
  return &amp;amp;i
}

someInt := newInt()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们这个函数的功能跟 &lt;code&gt;someInt := new(int)&lt;/code&gt; 一模一样。所以在我们自己定义 new 开头的函数时，出于约定也应该返回类型的指针。&lt;/p&gt;

&lt;h2 id=&#34;make-的主要特性&#34;&gt;make 的主要特性&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt; 也是内建函数，你可以从 &lt;a href=&#34;http://golang.org/pkg/builtin/#make&#34;&gt;http://golang.org/pkg/builtin/#make&lt;/a&gt; 这儿看到它，它的定义比 &lt;code&gt;new&lt;/code&gt; 多了一个参数，返回值也不同：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func make(Type, size IntegerType) Type
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;官方文档对于它的描述是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;内建函数 &lt;code&gt;make&lt;/code&gt; 用来为 &lt;code&gt;slice&lt;/code&gt;，&lt;code&gt;map&lt;/code&gt; 或 &lt;code&gt;chan&lt;/code&gt; 类型分配内存和初始化一个对象(&lt;strong&gt;注意&lt;/strong&gt;：只能用在这三种类型上)，跟 &lt;code&gt;new&lt;/code&gt; 类似，第一个参数也是一个类型而不是一个值，跟 &lt;code&gt;new&lt;/code&gt; 不同的是，&lt;code&gt;make&lt;/code&gt; 返回类型的引用而不是指针，而返回值也依赖于具体传入的类型，具体说明如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;Slice: 第二个参数 size 指定了它的长度，它的容量和长度相同。
你可以传入第三个参数来指定不同的容量值，但必须不能比长度值小。
比如 make([]int, 0, 10)

Map: 根据 size 大小来初始化分配内存，不过分配后的 map 长度为 0，如果 size 被忽略了，那么会在初始化分配内存时分配一个小尺寸的内存

Channel: 管道缓冲区依据缓冲区容量被初始化。如果容量为 0 或者忽略容量，管道是没有缓冲区的
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;new&lt;/code&gt; 的作用是初始化一个指向类型的指针(&lt;code&gt;*T&lt;/code&gt;)，&lt;code&gt;make&lt;/code&gt; 的作用是为 &lt;code&gt;slice&lt;/code&gt;，&lt;code&gt;map&lt;/code&gt; 或 &lt;code&gt;chan&lt;/code&gt; 初始化并返回引用(&lt;code&gt;T&lt;/code&gt;)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于 Martini 的跨域资源共享(CORS)</title>
      <link>https://se77en.cc/2014/%E5%9F%BA%E4%BA%8E-martini-%E7%9A%84%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABcors/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2014/%E5%9F%BA%E4%BA%8E-martini-%E7%9A%84%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%ABcors/</guid>
      <description>&lt;p&gt;##概述&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3.org/TR/cors/&#34;&gt;CORS&lt;/a&gt; 的全称是 Cross-Origin Resource Sharing，即：跨域资源共享&lt;/p&gt;

&lt;p&gt;根据我的理解，就是马伊琍和文章结婚了，姚笛就不能和文章结了，如果还想在一起，那就得采用一定的方法，这个方法就是跨域，哦，不对，是当第三者:)

根据维基百科的解释，CORS 是一种机制，这个机制允许一个 Web 页面上 JavaScript 向另外的域发起 XMLHttpRequests 请求，注意不是向该 Web 页面所在域请求。这样的跨域请求，在 CORS 之前，根据同源安全策略是会被浏览器拒绝的。CORS 定义了一种方法，这个方法使浏览器和服务器相互作用来限定是否允许跨域请求。它显然比只有单纯的同源请求有用，而且还比简单的允许所有跨域访问要安全。&lt;/p&gt;

&lt;p&gt;在 CORS 出现之前，已经有了很多种方法来实现跨域访问，其中最有名的就是 JSONP(JSON with Padding)，JSONP 是一种使用 JavaScript 请求其它域服务器的一种通信技术，本质就是利用同源策略的漏洞，一般来说位于 xxoo.se77en.cc 的网页是无法与非 xxoo.se77en.cc 的服务器通信的，但是 HTML 里的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 元素是一个例外，利用这一例外，可以通过 JavaScript 操作浏览器页面 DOM 来动态创建 Script 对象，再将 Script 的 src 属性指向另一个域的资源，服务器就会将数据伪装成一段 JavaScript 代码来实现跨域目的。不过这种技术只能发起 GET 请求，而且安全隐患极大，因为远程服务器可以发送 JavaScript 代码，所以极易受到跨网站伪造请求(CSRF/XSRF)，所以使用 JSONP 要格外小心。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注：目前有个正在进行的计划定义 &lt;a href=&#34;http://json-p.org/&#34;&gt;JSON-P 严格安全子集&lt;/a&gt;，使浏览器可以对 MIME 类别是 &lt;code&gt;application/json-p&lt;/code&gt; 的请求做强制处理，如果不能被解析为严格的 JSON-P，浏览器则会抛出一个错误或者忽略整个响应，目前正确的 JSONP MIME 类型仍然是 &lt;code&gt;application/javascript&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对比 JSONP 的限制，CORS 的限制主要是浏览器支持的问题(不过已经很不错了，除了万恶的 IE6)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://se77en.cc/img/cors-with-martini-and-golang/cors-in-broswer.png&#34; alt=&#34;cors-in-broswer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;##创建一个 CORS 请求&lt;/p&gt;

&lt;p&gt;完成一个 CORS 需要前后端配合。&lt;/p&gt;

&lt;p&gt;###前端&lt;/p&gt;

&lt;p&gt;对前端而言，基本没什么变化，还是使用 XMLHttpRequest 对象(IE 使用 XDomainRequest)，增加了参数和响应回调，当然如果你用 jQuery 可以不用考虑这么多了。下面用 JavaScript 和 jQuery 分别示例：&lt;/p&gt;

&lt;p&gt;首先是 JavaScript，比较复杂，所以直接用大牛 Nicholas•Zakas 写的帮助方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function createCORSRequest(method, url) {
  var xhr = new XMLHttpRequest();
  if (&amp;quot;withCredentials&amp;quot; in xhr) {

    // 检查 XMLHttpRequest 对象是否包含 &amp;quot;withCredentials&amp;quot; 属性
    // &amp;quot;withCredentials&amp;quot; 只在 XMLHTTPRequest2 对象中存在
    xhr.open(method, url, true);

  } else if (typeof XDomainRequest != &amp;quot;undefined&amp;quot;) {

    // 否则，检查是否是 XDomainRequest
    // XDomainRequest 只在 IE 中存在, 所以用 IE 的方式来创建 CORS 请求
    xhr = new XDomainRequest();
    xhr.open(method, url);

  } else {

    // 上述都不满足，说明浏览器不支持 CORS
    xhr = null;

  }
  return xhr;
}

var xhr = createCORSRequest(&#39;GET&#39;, url);
if (!xhr) {
  throw new Error(&#39;CORS not supported&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你想要提交 cookies 需要设置 XMLHttpRequest 的 withCredentials 属性为 true：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xhr.withCredentials = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后处理服务端的返回结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xhr.onload = function() {
 var responseText = xhr.responseText;
 console.log(responseText);
 // 处理返回结果
};

xhr.onerror = function() {
  console.log(&#39;There was an error!&#39;);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;坑爹的是，浏览器在发生错误时的处理方式并不好，FireFox 对于所有错误返回一个为0的状态值和一个空的信息。浏览器会在 console log 里打印一个错误信息，不过这个信息却不能被 JavaScript 访问。所以处理错误时，你只知道一个错误发生了，别的一概不知。&lt;/p&gt;

&lt;p&gt;前端完整代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 创建 XHR 对象
function createCORSRequest(method, url) {
  var xhr = new XMLHttpRequest();
  if (&amp;quot;withCredentials&amp;quot; in xhr) {
    // XHR for Chrome/Firefox/Opera/Safari.
    xhr.open(method, url, true);
  } else if (typeof XDomainRequest != &amp;quot;undefined&amp;quot;) {
    // XDomainRequest for IE.
    xhr = new XDomainRequest();
    xhr.open(method, url);
  } else {
    // 不支持 CORS
    xhr = null;
  }
  return xhr;
}


//创建真正的一个 CORS 请求
function makeCorsRequest() {
  var url = &#39;http://ooxx.se77en.cc&#39;;

  var xhr = createCORSRequest(&#39;GET&#39;, url);
  if (!xhr) {
    alert(&#39;CORS not supported&#39;);
    return;
  }

  // 处理响应
  xhr.onload = function() {
    var text = xhr.responseText;
    alert(&#39;Response from CORS request to &#39; + url);
  };

  xhr.onerror = function() {
    alert(&#39;Woops, there was an error making the request.&#39;);
  };

  xhr.send();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###服务端&lt;/p&gt;

&lt;p&gt;对服务端而言，最简单的处理方法就是增加下面一行到你的 Response Header 里：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Access-Control-Allow-Origin: *
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 go 来实现就是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func setAllowOrigin(writer http.ResponseWriter, r *http.Request) {
  writer.Header().Add(&amp;quot;Access-Control-Allow-Origin&amp;quot;, &amp;quot;*&amp;quot;)
  return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，如果希望处理 POST，PUT 这类复杂的请求，或者是想要更加精确的控制 CORS，如：允许的域范围，是否允许 Cookie，允许哪些请求方法，那自然处理也会变得复杂一点。&lt;/p&gt;

&lt;p&gt;对于任何非简单请求，浏览器都会先于服务器进行沟通，达成一致后，再发出实际请求。沟通的方式叫做 Preflight(起飞预备)，在发起实际请求前，浏览器首先通过 OPTIONS 方式(这样才能从服务器收到响应)。&lt;/p&gt;

&lt;p&gt;Preflight 请求：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OPTIONS /cors HTTP/1.1
Origin: http://ooxx.se77en.cc
Access-Control-Request-Method: POST, PUT
Access-Control-Request-Headers: X-Custom-Header
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Method&lt;/code&gt; 是浏览器要发出的请求类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Headers&lt;/code&gt; 是实际请求发送过来时额外的 Header 类型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上这些参数都是可以用逗号分隔的多值字符串。&lt;/p&gt;

&lt;p&gt;Preflight 响应：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Access-Control-Allow-Origin: http://ooxx.se77en.cc
Access-Control-Allow-Methods: GET, POST, PUT
Access-Control-Allow-Headers: X-Custom-Header
Content-Type: text/html; charset=utf-8
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 是 CORS 响应的标配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt; 和 &lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt; 是服务器支持的方法和头信息，值得注意的是，这里应该填写全集，而非对应 Preflight 请求里的项目&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此外还有一些可选项：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Max-Age&lt;/code&gt; 是告诉浏览器多少秒以内，不再需要请求 Preflight&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt; 是告诉浏览器是否支持 Cookie，对应上面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Preflight 沟通失败：&lt;/p&gt;

&lt;p&gt;如果 Preflight 发送过来的请求权限超过了服务器所支持的，回复的方法是忽略掉 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 即可，就像一个普通的 HTTP 200 返回，这样浏览器就不会发起实际请求了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Content-Type: text/html; charset=utf-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;沟通成功后的实际请求和响应：&lt;/p&gt;

&lt;p&gt;当浏览器发起 Preflight，并确认服务器支持 CORS 无误，就可以发起实际请求步骤&lt;/p&gt;

&lt;p&gt;实际请求：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POST /cors HTTP/1.1
Origin: http://ooxx.se77en.cc
Host: xxoo.wisteria.io
X-Custom-Header: value
Accept-Language: en-US
Connection: keep-alive
User-Agent: Mozilla/5.0...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际响应：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Access-Control-Allow-Origin: http://ooxx.se77en.cc
Content-Type: text/html; charset=utf-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;交互过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://se77en.cc/img/cors-with-martini-and-golang/cors_flow.png&#34; alt=&#34;cors_flow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;服务端响应流程图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://se77en.cc/img/cors-with-martini-and-golang/cors_server_flowchart.png&#34; alt=&#34;cors_server_flowchart&#34; /&gt;&lt;/p&gt;

&lt;p&gt;###如何用 Go 语言实现？&lt;/p&gt;

&lt;p&gt;按照上述过程，首先判断是 Preflight 还是 Actual Request：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func (cors *Cors) ServeHTTP(w http.ResponseWriter, r *http.Request) {
  if origin := r.Header.Get(&amp;quot;Origin&amp;quot;); origin == &amp;quot;&amp;quot; {
      cors.corsNotValid(w, r)
      return
  } else if r.Method != &amp;quot;OPTIONS&amp;quot; {
      //actual request.
      cors.actualRequest(w, r)
      return
  } else if acrm := r.Header.Get(&amp;quot;Access-Control-Request-Method&amp;quot;); acrm == &amp;quot;&amp;quot; {
      //actual request.
      cors.actualRequest(w, r)
      return
  } else {
      //preflight request.
      cors.preflightRequest(w, r)
      return
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###在 Martini 中实现&lt;/p&gt;

&lt;p&gt;上面代码只是说明意图，下面我们来示范一下 CORS 在 Martini 中的应用。&lt;/p&gt;

&lt;p&gt;首先是页面所在域，假设为 xxoo.wisteria.io&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;script src=&amp;quot;http://cdn.staticfile.org/jquery/1.8.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    $(function() {
      $(&amp;quot;#btn&amp;quot;).click(function(e){
        e.preventDefault();  //感谢 @A-limon 提醒
        var btx = $(&amp;quot;#btx&amp;quot;).val();
        var url = &amp;quot;http://ooxx.se77en.cc/cors&amp;quot;;
        $.ajax(url, {
          type:&amp;quot;POST&amp;quot;,
          data:{&amp;quot;value&amp;quot;:btx},
          dataType:&amp;quot;json&amp;quot;,
          xhrFields:{
            withCredentials:false
          },
          success:function(data){alert(data.msg);},
          error:function(){alert(&amp;quot;errror&amp;quot;);}
        });
      });
    });
  &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;CORS&amp;lt;/h1&amp;gt;
  &amp;lt;form&amp;gt;
    &amp;lt;textarea id=&amp;quot;btx&amp;quot; cols=&amp;quot;30&amp;quot; rows=&amp;quot;10&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;button id=&amp;quot;btn&amp;quot;&amp;gt;submit&amp;lt;/button&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来是服务器所在域，假设为 ooxx.se77en.cc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;github.com/go-martini/martini&amp;quot;
	&amp;quot;github.com/martini-contrib/binding&amp;quot;
	&amp;quot;github.com/martini-contrib/cors&amp;quot;
)

type xxoo struct {
	Value string `form:&amp;quot;value&amp;quot;`
}

func main() {
	m := martini.Classic()
	m.Use(cors.Allow(&amp;amp;cors.Options{
		AllowOrigins:     []string{&amp;quot;http://xxoo.wisteria.io&amp;quot;},
		AllowMethods:     []string{&amp;quot;POST&amp;quot;},
		AllowHeaders:     []string{&amp;quot;Origin&amp;quot;, &amp;quot;x-requested-with&amp;quot;, &amp;quot;Content-Type&amp;quot;, &amp;quot;Content-Range&amp;quot;, &amp;quot;Content-Disposition&amp;quot;, &amp;quot;Content-Description&amp;quot;},
		ExposeHeaders:    []string{&amp;quot;Content-Length&amp;quot;},
		AllowCredentials: false,
	}))

	m.Post(&amp;quot;/cors&amp;quot;, binding.Form(xxoo{}), func(ooxx xxoo, writer http.ResponseWriter) (int, string) {
		writer.Header().Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)
		log.Println(&amp;quot;******* &amp;quot; + ooxx.Value + &amp;quot; *******&amp;quot;)
		return http.StatusOK, `{&amp;quot;msg&amp;quot;:&amp;quot;hello cors&amp;quot;}`
	})
	
  m.Run()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们使用了 Martini 的一个叫 cors 的插件，可以看到 Martini 的 cors 插件已经为我们做了很多工作，详细说明请参见 &lt;a href=&#34;https://github.com/martini-contrib/cors#usage&#34;&gt;cors 文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;##感谢&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Cross-origin_resource_sharing&#34;&gt;http://en.wikipedia.org/wiki/Cross-origin_resource_sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/JSONP&#34;&gt;http://en.wikipedia.org/wiki/JSONP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/en/tutorials/cors/&#34;&gt;http://www.html5rocks.com/en/tutorials/cors/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://semicircle.github.io/blog/2013/09/29/go-with-cors/&#34;&gt;http://semicircle.github.io/blog/2013/09/29/go-with-cors/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://client.cors-api.appspot.com/client&#34;&gt;http://client.cors-api.appspot.com/client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://enable-cors.org/&#34;&gt;http://enable-cors.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Go 语言的并发模型--通过通信来共享内存</title>
      <link>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B--%E9%80%9A%E8%BF%87%E9%80%9A%E4%BF%A1%E6%9D%A5%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</link>
      <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2014/go-%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B--%E9%80%9A%E8%BF%87%E9%80%9A%E4%BF%A1%E6%9D%A5%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</guid>
      <description>&lt;p&gt;##概述&lt;/p&gt;

&lt;p&gt;我一直在找一种好的方法来解释 go 语言的&lt;a href=&#34;http://golang.org/doc/effective_go.html#concurrency&#34;&gt;并发模型&lt;/a&gt;：
&amp;gt; 不要通过共享内存来通信，相反，应该通过通信来共享内存&lt;/p&gt;

&lt;p&gt;但是没有发现一个好的解释来满足我下面的需求：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通过一个例子来说明最初的问题&lt;/li&gt;
&lt;li&gt;提供一个共享内存的解决方案&lt;/li&gt;
&lt;li&gt;提供一个通过通信的解决方案&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇文章我就从这三个方面来做出解释。&lt;/p&gt;

&lt;p&gt;读过这篇文章后你应该会了解&lt;strong&gt;&lt;em&gt;通过通信来共享内存&lt;/em&gt;&lt;/strong&gt;的模型，以及它和&lt;strong&gt;&lt;em&gt;通过共享内存来通信&lt;/em&gt;&lt;/strong&gt;的区别，你还将看到如何分别通过这两种模型来解决访问和修改共享资源的问题。

##前提&lt;/p&gt;

&lt;p&gt;设想一下我们要访问一个银行账号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Account interface {
  Withdraw(uint)
  Deposit(uint)
  Balance() int
}

type Bank struct {
  account Account
}

func NewBank(account Account) *Bank {
  return &amp;amp;Bank{account: account}
}

func (bank *Bank) Withdraw(amount uint, actor_name string) {
  fmt.Println(&amp;quot;[-]&amp;quot;, amount, actor_name)
  bank.account.Withdraw(amount)
}

func (bank *Bank) Deposit(amount uint, actor_name string) {
  fmt.Println(&amp;quot;[+]&amp;quot;, amount, actor_name)
  bank.account.Deposit(amount)
}

func (bank *Bank) Balance() int {
  return bank.account.Balance()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为 &lt;code&gt;Account&lt;/code&gt; 是一个接口，所以我们提供一个简单的实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type SimpleAccount struct{
  balance int
}

func NewSimpleAccount(balance int) *SimpleAccount {
  return &amp;amp;SimpleAccount{balance: balance}
}

func (acc *SimpleAccount) Deposit(amount uint) {
  acc.setBalance(acc.balance + int(amount))
}

func (acc *SimpleAccount) Withdraw(amount uint) {
  if acc.balance &amp;gt;= int(amount) {
    acc.setBalance(acc.balance - int(amount))
  } else {
    panic(&amp;quot;杰克穷死&amp;quot;)
  }
}

func (acc *SimpleAccount) Balance() int {
  return acc.balance
}

func (acc *SimpleAccount) setBalance(balance int) {
  acc.add_some_latency()  //增加一个延时函数，方便演示
  acc.balance = balance
}

func (acc *SimpleAccount) add_some_latency() {
  &amp;lt;-time.After(time.Duration(rand.Intn(100)) * time.Millisecond)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可能注意到了 &lt;code&gt;balance&lt;/code&gt; 没有被直接修改，而是被放到了  &lt;code&gt;setBalance&lt;/code&gt; 方法里进行修改。这样设计是为了更好的描述问题。稍后我会做出解释。&lt;/p&gt;

&lt;p&gt;把上面所有部分弄好以后我们就可以像下面这样使用它啦：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  balance := 80
  b := NewBank(NewSimpleAccount(balance))
  
  fmt.Println(&amp;quot;初始化余额&amp;quot;, b.Balance())
  
  b.Withdraw(30, &amp;quot;马伊琍&amp;quot;)
  
  fmt.Println(&amp;quot;-----------------&amp;quot;)
  fmt.Println(&amp;quot;剩余余额&amp;quot;, b.Balance())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行上面的代码会输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;初始化余额 80
[-] 30 马伊琍
-----------------
剩余余额 50
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没错！&lt;/p&gt;

&lt;p&gt;不错在现实生活中，一个银行账号可以有很多个附属卡，不同的附属卡都可以对同一个账号进行存取钱，所以我们来修改一下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  balance := 80
  b := NewBank(NewSimpleAccount(balance))
  
  fmt.Println(&amp;quot;初始化余额&amp;quot;, b.Balance())
  
  done := make(chan bool)
  
  go func() { b.Withdraw(30, &amp;quot;马伊琍&amp;quot;); done &amp;lt;- true }()
  go func() { b.Withdraw(10, &amp;quot;姚笛&amp;quot;); done &amp;lt;- true }()
  
  //等待 goroutine 执行完成
  &amp;lt;-done
  &amp;lt;-done
  
  fmt.Println(&amp;quot;-----------------&amp;quot;)
  fmt.Println(&amp;quot;剩余余额&amp;quot;, b.Balance())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这儿两个附属卡并发的从账号里取钱，来看看输出结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;初始化余额 80
[-] 30 马伊琍
[-] 10 姚笛
-----------------
剩余余额 70
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这下把文章高兴坏了:)&lt;/p&gt;

&lt;p&gt;结果当然是错误的，剩余余额应该是40而不是70，那么让我们看看到底哪儿出问题了。&lt;/p&gt;

&lt;p&gt;##问题&lt;/p&gt;

&lt;p&gt;当并发访问共享资源时，无效状态有很大可能会发生。&lt;/p&gt;

&lt;p&gt;在我们的例子中，当两个附属卡同一时刻从同一个账号取钱后，我们最后得到银行账号(即共享资源)错误的剩余余额(即无效状态)。&lt;/p&gt;

&lt;p&gt;我们来看一下执行时候的情况：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                 处理情况
             --------------
             _马伊琍_|_姚笛_
 1. 获取余额     80  |  80
 2. 取钱       -30  | -10
 3. 当前剩余     50  |  70
                ... | ...
 4. 设置余额     50  ?  70  //该先设置哪个好呢？
 5. 后设置的生效了
             --------------
 6. 剩余余额        70
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面 &lt;code&gt;...&lt;/code&gt; 的地方描述了我们 &lt;code&gt;add_some_latency&lt;/code&gt; 实现的延时状况，现实世界经常发生延迟情况。所以最后的剩余余额就由最后设置余额的那个附属卡决定。&lt;/p&gt;

&lt;p&gt;##解决办法&lt;/p&gt;

&lt;p&gt;我们通过两种方法来解决这个问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;共享内存的解决方案&lt;/li&gt;
&lt;li&gt;通过通信的解决方案&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有的解决方案都是简单的封装了一下 &lt;code&gt;SimpleAccount&lt;/code&gt; 来实现保护机制。&lt;/p&gt;

&lt;p&gt;###共享内存的解决方案&lt;/p&gt;

&lt;p&gt;又叫 “通过共享内存来通信”。&lt;/p&gt;

&lt;p&gt;这种方案暗示了使用锁机制来预防同时访问和修改共享资源。锁告诉其它处理程序这个资源已经被一个处理程序占用了，因此别的处理程序需要排队直到当前处理程序处理完毕。&lt;/p&gt;

&lt;p&gt;让我们来看看 &lt;code&gt;LockingAccount&lt;/code&gt; 是怎么实现的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type LockingAccount struct {
  lock    sync.Mutex
  account *SimpleAccount
}

//封装一下 SimpleAccount
func NewLockingAccount(balance int) *LockingAccount {
  return &amp;amp;LockingAccount{account: NewSimpleAccount(balance)}
}

func (acc *LockingAccount) Deposit(amount uint) {
  acc.lock.Lock()
  defer acc.lock.Unlock()
  acc.account.Deposit(amount)
}

func (acc *LockingAccount) Withdraw(amount uint) {
  acc.lock.Lock()
  defer acc.lock.Unlock()
  acc.account.Withdraw(amount)
}

func (acc *LockingAccount) Balance() int {
  acc.lock.Lock()
  defer acc.lock.Unlock()
  return acc.account.Balance()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接明了！注意 &lt;code&gt;lock sync.Lock&lt;/code&gt;，&lt;code&gt;lock.Lock()&lt;/code&gt;，&lt;code&gt;lock.Unlock()&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这样每次一个附属卡访问银行账号(即共享资源)，这个附属卡会自动获得锁直到最后操作完毕。&lt;/p&gt;

&lt;p&gt;我们的 &lt;code&gt;LockingAccount&lt;/code&gt; 像下面这样使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func main() {
  balance := 80
  b := NewBank(NewLockingAccount(balance))
  
  fmt.Println(&amp;quot;初始化余额&amp;quot;, b.Balance())
  
  done := make(chan bool)
  
  go func() { b.Withdraw(30, &amp;quot;马伊琍&amp;quot;); done &amp;lt;- true }()
  go func() { b.Withdraw(10, &amp;quot;姚笛&amp;quot;); done &amp;lt;- true }()
  
  //等待 goroutine 执行完成
  &amp;lt;-done
  &amp;lt;-done
  
  fmt.Println(&amp;quot;-----------------&amp;quot;)
  fmt.Println(&amp;quot;剩余余额&amp;quot;, b.Balance())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出的结果是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;初始化余额 80
[-] 30 马伊琍
[-] 10 姚笛
-----------------
剩余余额 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在结果正确了！&lt;/p&gt;

&lt;p&gt;在这个例子中第一个处理程序加锁后独享共享资源，其它处理程序只能等待它执行完成。&lt;/p&gt;

&lt;p&gt;我们接着看一下执行时的情况，假设马伊琍先拿到了锁：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                            处理过程
                        ________________
                        _马伊琍_|__姚笛__
        加锁                   &amp;gt;&amp;lt;
        得到余额            80  |
        取钱               -30  |
        当前余额            50  |
                           ... |
        设置余额            50  |
        解除锁                 &amp;lt;&amp;gt;
                               |
        当前余额                50
                               |
        加锁                   &amp;gt;&amp;lt;
        得到余额                |  50
        取钱                    | -10
        当前余额                |  40
                               |  ...
        设置余额                |  40
        解除锁                  &amp;lt;&amp;gt;
                        ________________
        剩余余额                40

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们的处理程序在访问共享资源时相继的产生了正确的结果。&lt;/p&gt;

&lt;p&gt;###通过通信的解决方案&lt;/p&gt;

&lt;p&gt;又叫 “通过通信来共享内存”。&lt;/p&gt;

&lt;p&gt;现在账号被命名为 &lt;code&gt;ConcurrentAccount&lt;/code&gt;，像下面这样来实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type ConcurrentAccount struct {
  account     *SimpleAccount
  deposits    chan uint
  withdrawals chan uint
  balances    chan chan int
}

func NewConcurrentAccount(amount int) *ConcurrentAccount{
  acc := &amp;amp;ConcurrentAccount{
    account :    &amp;amp;SimpleAccount{balance: amount},
    deposits:    make(chan uint),
    withdrawals: make(chan uint),
    balances:    make(chan chan int),
  }
  acc.listen()
  
  return acc
}

func (acc *ConcurrentAccount) Balance() int {
  ch := make(chan int)
  acc.balances &amp;lt;- ch
  return &amp;lt;-ch
}

func (acc *ConcurrentAccount) Deposit(amount uint) {
  acc.deposits &amp;lt;- amount
}

func (acc *ConcurrentAccount) Withdraw(amount uint) {
  acc.withdrawals &amp;lt;- amount
}

func (acc *ConcurrentAccount) listen() {
  go func() {
    for {
      select {
      case amnt := &amp;lt;-acc.deposits:
        acc.account.Deposit(amnt)
      case amnt := &amp;lt;-acc.withdrawals:
        acc.account.Withdraw(amnt)
      case ch := &amp;lt;-acc.balances:
        ch &amp;lt;- acc.account.Balance()
      }
    }
  }()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ConcurrentAccount&lt;/code&gt; 同样封装了 &lt;code&gt;SimpleAccount&lt;/code&gt; ，然后增加了通信通道&lt;/p&gt;

&lt;p&gt;调用代码和加锁版本的一样，这里就不写了，唯一不一样的就是初始化银行账号的时候：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;b := NewBank(NewConcurrentAccount(balance))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行产生的结果和加锁版本一样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;初始化余额 80
[-] 30 马伊琍
[-] 10 姚笛
-----------------
剩余余额 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们来深入了解一下细节。&lt;/p&gt;

&lt;p&gt;###通过通信来共享内存是如何工作的&lt;/p&gt;

&lt;p&gt;一些基本注意点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;共享资源被封装在一个控制流程中。
结果就是资源成为了非共享状态。没有处理程序能够直接访问或者修改资源。你可以看到访问和修改资源的方法实际上并没有执行任何改变。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  func (acc *ConcurrentAccount) Balance() int {
    ch := make(chan int)
    acc.balances &amp;lt;- ch
    balance := &amp;lt;-ch
    return balance
  }
  func (acc *ConcurrentAccount) Deposit(amount uint) {
    acc.deposits &amp;lt;- amount
  }

  func (acc *ConcurrentAccount) Withdraw(amount uint) {
    acc.withdrawals &amp;lt;- amount
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;访问和修改是通过消息和控制流程通信。&lt;/li&gt;
&lt;li&gt;在控制流程中任何访问和修改的动作都是相继发生的。
当控制流程接收到访问或者修改的请求后会立即执行相关动作。让我们仔细看看这个流程：
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  func (acc *ConcurrentAccount) listen() {
    // 执行控制流程
    go func() {
      for {
        select {
        case amnt := &amp;lt;-acc.deposits:
          acc.account.Deposit(amnt)
        case amnt := &amp;lt;-acc.withdrawals:
          acc.account.Withdraw(amnt)
        case ch := &amp;lt;-acc.balances:
          ch &amp;lt;- acc.account.Balance()
        }
      }
    }()
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://golang.org/ref/spec#Select_statements&#34;&gt;select&lt;/a&gt; 不断地从各个通道中取出消息，每个通道都跟它们所要执行的操作相一致。&lt;/p&gt;

&lt;p&gt;重要的一点是：在 &lt;code&gt;select&lt;/code&gt; 声明内部的一切都是相继执行的(在同一个处理程序中排队执行)。一次只有一个事件(在通道中接受或者发送)发生，这样就保证了同步访问共享资源。&lt;/p&gt;

&lt;p&gt;领会这个有一点绕。&lt;/p&gt;

&lt;p&gt;让我们用例子来看看 &lt;code&gt;Balance()&lt;/code&gt; 的执行情况：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         一张附属卡的流程      |   控制流程 
      ----------------------------------------------

 1.     b.Balance()         |
 2.             ch -&amp;gt; [acc.balances]-&amp;gt; ch
 3.             &amp;lt;-ch        |  balance = acc.account.Balance()
 4.     return  balance &amp;lt;-[ch]&amp;lt;- balance
 5                          |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这两个流程都干了点什么呢？&lt;/p&gt;

&lt;p&gt;###附属卡的流程&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;调用 &lt;code&gt;b.Balance()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建通道 &lt;code&gt;ch&lt;/code&gt;，将 &lt;code&gt;ch&lt;/code&gt; 通道塞入通道 &lt;code&gt;acc.balances&lt;/code&gt; 中与控制流程通信，这样控制流程也可以通过 &lt;code&gt;ch&lt;/code&gt; 来返回余额&lt;/li&gt;
&lt;li&gt;等待 &lt;code&gt;&amp;lt;-ch&lt;/code&gt; 来取得要接受的余额&lt;/li&gt;
&lt;li&gt;接受余额&lt;/li&gt;
&lt;li&gt;继续&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###控制流程&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;空闲或者处理&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;acc.balances&lt;/code&gt; 通道里面的 &lt;code&gt;ch&lt;/code&gt; 通道来接受余额请求&lt;/li&gt;
&lt;li&gt;取得真正的余额值&lt;/li&gt;
&lt;li&gt;将余额值发送到 &lt;code&gt;ch&lt;/code&gt; 通道&lt;/li&gt;
&lt;li&gt;准备处理下一个请求&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;控制流程每次只处理一个 &lt;code&gt;事件&lt;/code&gt;。这也就是为什么除了描述出来的这些以外，第2-4步没有别的操作执行。&lt;/p&gt;

&lt;p&gt;##总结&lt;/p&gt;

&lt;p&gt;这篇博客描述了问题以及问题的解决办法，但那时没有深入去探究不同解决办法的优缺点。&lt;/p&gt;

&lt;p&gt;其实这篇文章的例子更适合用 mutex，因为这样代码更加清晰。&lt;/p&gt;

&lt;p&gt;最后，请毫无顾忌的指出我的错误！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Koa 从零打造 TODO 应用</title>
      <link>https://se77en.cc/2014/%E4%BD%BF%E7%94%A8-koa-%E4%BB%8E%E9%9B%B6%E6%89%93%E9%80%A0-todo-%E5%BA%94%E7%94%A8/</link>
      <pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2014/%E4%BD%BF%E7%94%A8-koa-%E4%BB%8E%E9%9B%B6%E6%89%93%E9%80%A0-todo-%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;http://blog.peterdecroos.com/blog/2014/02/01/koa-zero-to-todo-list/&#34;&gt;Koa: Zero to Todo List&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;###注意：你需要使用node 0.11.x外加 &lt;code&gt;-harmony&lt;/code&gt; 来执行代码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Express 团队利用新的 ECMAScript 6 的生成器语法创建了新的框架，&lt;a href=&#34;http://koajs.com/&#34;&gt;Koa&lt;/a&gt; 框架是一个全新的 node web 框架，包含了很多有意思的东西。

##之前的方式&lt;/p&gt;

&lt;p&gt;在 node 标准库里，&lt;code&gt;http&lt;/code&gt; 模块被用来创建服务。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var server = http.createServer(function(req, res) {
  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});
  //这里写服务逻辑
  res.end(&#39;&#39;);
});

server.listen(3000, &#39;127.0.0.1&#39;);
console.log(&#39;listening on port 3000&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Express 暴露一个方法使我们可以将 &lt;code&gt;http.createServer&lt;/code&gt; 作为回调。Express 中间件是一个函数集合，每个函数包含了三个参数 &lt;code&gt;req&lt;/code&gt;,&lt;code&gt;res&lt;/code&gt;,&lt;code&gt;next&lt;/code&gt;。中间件执行一些操作，修改请求或者返回对象然后通过调用 &lt;code&gt;next()&lt;/code&gt; 来传递到堆栈里的下一个中间件。它类似一个瀑布模型，在中间件栈的底部结束响应。&lt;/p&gt;

&lt;p&gt;##进入 Koa：建立在生成器机制上的框架&lt;/p&gt;

&lt;p&gt;就像 Express，Koa 也是生成一个可以被传递到 &lt;code&gt;http.createServer()&lt;/code&gt; 的回调。与 Express 不同的是，它使用生成器提供一个更加细粒度的控制流程。&lt;/p&gt;

&lt;p&gt;下面是一个最基本的 Koa 应用，用来读取一个文件的内容&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var koa      = require(&#39;koa&#39;);
var Promise  = require(&#39;bluebird&#39;);

//创建 promise 版本的 fs
var fs = Promise.promisifyAll(require(&#39;fs&#39;));
//创建 koa 实例
var app = koa();

app.use(function *(next) {
  //这是一个示例中间件，在控制台记录一些东西
  console.log(&#39;timestamp: before request =&amp;gt; &#39;, time.now());
  yield next;
  console.log(&#39;timestamp: after request =&amp;gt; &#39;, time.now());
});

app.use(function *() {
  this.body = yield fs.readFileAsync(&#39;./app.js&#39;, &#39;utf8&#39;);
});

app.listen(3000);
console.log(&#39;now listening on port 3000&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不像 Express，Koa 中中间件使用生成器来编写。在 Koa 流中下游的中间件在返回时向上流动(回形针调用方式，具体参见：koajs.cn)。通过显式的调用 &lt;code&gt;yield next&lt;/code&gt; 来执行下游中间件。当下游中间件返回时，控制流回溯到上游中间件。&lt;/p&gt;

&lt;p&gt;Express 通过不同的函数来传递 node 原生的 req 和 res，Koa 则是通过讲它们装入一个借口来管理上下文。不过它们仍然可以通过 &lt;code&gt;this&lt;/code&gt; 关键字获取到，像这样：&lt;code&gt;this.req&lt;/code&gt;, &lt;code&gt;this.res&lt;/code&gt;。然而，在文档中直接使用原生对象是不被推荐的。可以预测到当在控制流中调用 &lt;code&gt;this.res.end(&#39;&#39;)&lt;/code&gt; 时会抛出一个 monkey wrench(猴子扳手？此处不会翻译欢迎指正)。所以建议你使用 &lt;code&gt;this.request&lt;/code&gt; 和 &lt;code&gt;this.response&lt;/code&gt; 来代替直接调用原生对象。很多方法都起了别名指向直接用 &lt;code&gt;this&lt;/code&gt; 调用，比如：&lt;code&gt;this.body&lt;/code&gt; 就是 &lt;code&gt;this.response.body&lt;/code&gt; 的别名。&lt;/p&gt;

&lt;p&gt;目前似乎还没有出现可以直接得到请求体的办法。co-body 分析器可以直接的解析请求体，不过文档说别这么做，Koa 是一个年轻的框架，所以别让你的手闲下来。&lt;/p&gt;

&lt;p&gt;##使用 Koa 做一个 TODO 应用&lt;/p&gt;

&lt;p&gt;刚才我们已经简单的进行了介绍，现在来试着做一个复杂点的。一个 TODO 应用貌似不错，为了简化，我们把 todos 存放在内存里。&lt;/p&gt;

&lt;p&gt;Koa 是一个极简的框架，它核心里并没有提供 body 解析，session 和 routing。不幸的是 Koa 太嫩了以至于还没有很多 npm 的模块是为它来写的。浏览了一下 &lt;a href=&#34;https://github.com/koajs/koa/wiki&#34;&gt;Koa 介绍页面&lt;/a&gt;发现有一些必要的模块可以供给我们的基本 TODO 应用来使用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/koajs/route&#34;&gt;koa-route&lt;/a&gt;: 用作路由&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/visionmedia/co-body&#34;&gt;co-body&lt;/a&gt;: 用作解析 post 请求体&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/koajs/static&#34;&gt;koa-static&lt;/a&gt;: 用于处理静态文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面是基本的服务端 api&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var koa          = require(&#39;koa&#39;);
var staticServer = require(&#39;koa-staitc&#39;);

//这个允许我们解析原生请求对象来获取请求内容
var parse        = require(&#39;co-body&#39;);

var router       = require(&#39;koa-route&#39;);
var _            = require(&#39;underscore&#39;);

var Promise      = require(&#39;bluebird&#39;);
var path         = require(&#39;path&#39;);

var fs           = Promise.promisifyAll(require(&#39;fs&#39;));
var app          = koa();

//我们的最简单的存储方式
var todos = [];

//获取唯一的 id 值
var counter = (function() {
  var count = 0;
  return function() {
    count++;
    return count;
  }
})();

//处理静态资源文件夹
app.use(staticServer(path.join(__dirname, &#39;public&#39;)));

app.use(router.post(&#39;/todos&#39;, function *() {
  /*
    yield使我们可以传递异步函数，然后返回内容或者是 promises
    它会冻结当前中间件直到函数被执行完成，然后返回当前中间件继续解冻执行
  */
  var todo = (yield parse.json(this));
  
  todo.id = counter();
  todos.push(todo);
  this.body = JSON.stringify(todos);
}));

app.use(router.get(&#39;/todos&#39;, function *() {
  this.body = JSON.stringify(todos);
}));

app.use(router.delete(&#39;/todos/:id&#39;, function *(id) {
  todos = _(todos).reject(function(todo) {
    console.log(&#39;what? &#39;, todo, id);
    return todo.id === parseInt(id, 10);
  }, this);
  this.body = JSON.stringify(todos.sort(function(a, b) {
    return a - b;
  }));
}));

app.listen(3000);
console.log(&#39;listening on port 3000&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从 &lt;a href=&#34;https://github.com/cultofmetatron/koa-todo&#34;&gt;github&lt;/a&gt; 上下载完整代码，github 上的版本包含了前端代码。&lt;/p&gt;

&lt;p&gt;###一些需要注意的：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; 关键字可以做一些有意思的事情。如果我们向当前中间件传递一个一步函数，这个函数返回数据块或者 promise，那么它会停止执行当前中间件直到函数完成。等它返回数据块或者 promise 后，会恢复生成器执行。这样更容易阅读。&lt;/p&gt;

&lt;p&gt;###一些警告：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; 关键字使我们可以写出一些安全的代码块，但它也不总是理想的解决办法。&lt;/p&gt;

&lt;p&gt;举个栗子，如果我们执行三个相互不依赖的异步操作，像下面这样&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.use(function *() {
  var a = yield async1();
  var b = yield async2();
  var c = yield async3();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会使 node 的并发失效。当我们调用 async1,我们必须等待 async1 完成才能执行 async2。不过我们可以用 promise 来优化这3个函数，然后生成一个合并的 promise。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.use(function *() {
  var a = async1();
  var b = async2();
  var c = async3();
  var result = yield Promise.all([a, b, c]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：tjholowaychuk 大神在原文留言指出了一些问题，见下面图&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当 Koa 框架成熟时，它将会允许更加细粒度的控制以便于我们写出下一代的 web 应用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://se77en.cc/img/koa-zero-to-todo-list-translation/1.png&#34; alt=&#34;TJ&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript 迭代器和生成器</title>
      <link>https://se77en.cc/2014/javascript-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</link>
      <pubDate>Mon, 20 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2014/javascript-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;迭代器和生成器&#34;&gt;迭代器和生成器&lt;/h1&gt;

&lt;p&gt;翻译自 MDN 官方文档，原文地址：&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators?redirectlocale=en-US&amp;amp;redirectslug=JavaScript%2FGuide%2FIterators_and_Generators&#34;&gt;Iterators and Generators&lt;/a&gt;

处理集合里的每一项是一个非常普通的操作，JavaScript提供了许多方法来迭代一个集合，从简单的&lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Statements/for&#34;&gt;for&lt;/a&gt;和&lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Statements/for_each...in&#34;&gt;for each&lt;/a&gt;循环到 &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/map&#34;&gt;map()&lt;/a&gt;，&lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter&#34;&gt;filter()&lt;/a&gt; 和 &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Guide/Predefined_Core_Objects#Array_comprehensions&#34;&gt;array comprehensions&lt;/a&gt;(数组推导式)。在JavaScript 1.7中，迭代器和生成器在JavaScript核心语法中带来了新的迭代机制，而且还提供了定制 &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in&#34;&gt;for&amp;hellip;in&lt;/a&gt; 和 &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Statements/for_each...in&#34;&gt;for each&lt;/a&gt; 循环行为的机制。&lt;/p&gt;

&lt;p&gt;##迭代器&lt;/p&gt;

&lt;p&gt;迭代器是一个每次访问集合序列中一个元素的对象，并跟踪该序列中迭代的当前位置。在JavaScript中迭代器是一个对象，这个对象提供了一个 &lt;code&gt;next()&lt;/code&gt; 方法，&lt;code&gt;next()&lt;/code&gt; 方法返回序列中的下一个元素。当序列中所有元素都遍历完成时，该方法抛出 &lt;code&gt;StopIteration&lt;/code&gt; 异常。&lt;/p&gt;

&lt;p&gt;迭代器对象一旦被建立，就可以通过显式的重复调用&lt;code&gt;next()&lt;/code&gt;，或者使用JavaScript的 &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in&#34;&gt;for&amp;hellip;in&lt;/a&gt; 和 &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Statements/for_each...in&#34;&gt;for each&lt;/a&gt; 循环隐式调用。&lt;/p&gt;

&lt;p&gt;简单的对对象和数组进行迭代的迭代器可以使用 &lt;code&gt;Iterator()&lt;/code&gt; 被创建：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var lang = { name: &#39;JavaScript&#39;, birthYear: 1995 };
    var it = Iterator(lang);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦初始化完成，&lt;code&gt;next()&lt;/code&gt; 方法可以被调用来依次访问对象的键值对:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var pair = it.next(); //键值对是[&amp;quot;name&amp;quot;, &amp;quot;JavaScript&amp;quot;]
    pair = it.next(); //键值对是[&amp;quot;birthday&amp;quot;, 1995]
    pair = it.next(); //一个 `StopIteration` 异常被抛出
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in&#34;&gt;for&amp;hellip;in&lt;/a&gt; 循环可以被用来替换显式的调用 &lt;code&gt;next()&lt;/code&gt; 方法。当 &lt;code&gt;StopIteration&lt;/code&gt; 异常被抛出时，循环会自动终止。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var it = Iterator(lang);
    for (var pair in it)
      print(pair); //每次输出 it 中的一个 [key, value] 键值对
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你只想迭代对象的 key 值，可以往 &lt;code&gt;Iterator()&lt;/code&gt; 函数中传入第二个参数，值为 &lt;code&gt;true&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var it = Iterator(lang, true);
    for (var key in it)
      print(key); //每次输出 key 值
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 &lt;code&gt;Iterator()&lt;/code&gt; 访问对象的一个好处是，被添加到 &lt;code&gt;Object.prototype&lt;/code&gt; 的自定义属性不会被包含在序列对象中。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Iterator()&lt;/code&gt; 同样可以被作用在数组上：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var langs = [&#39;JavaScript&#39;, &#39;Python&#39;, &#39;Haskell&#39;];
    var it = Iterator(langs);
    for (var pair in it)
      print(pair); //每次迭代输出 [index, language] 键值对
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就像遍历对象一样，把 &lt;code&gt;true&lt;/code&gt; 当做第二个参数传入遍历的结果将会是数组索引：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var langs = [&#39;JavaScript&#39;, &#39;Python&#39;, &#39;Haskell&#39;];
    var it = Iterator(langs, true);
    for (var i in it)
      print(i); //输出 0，然后是 1，然后是 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 &lt;code&gt;let&lt;/code&gt; 关键字可以在循环内部分别分配索引和值给块变量，还可以解构赋值(Destructuring Assignment)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var langs = [&#39;JavaScript&#39;, &#39;Python&#39;, &#39;Haskell&#39;];
    var it = Iterators(langs);
    for (let [i, lang] in it)
      print(i + &#39;: &#39; + lang); //输出 &amp;quot;0: JavaScript&amp;quot; 等
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##声明自定义迭代器&lt;/p&gt;

&lt;p&gt;一些代表元素集合的对象应该用一种指定的方式来迭代。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;迭代一个表示范围(Range)的对象应该一个接一个的返回这个范围包含的数字&lt;/li&gt;
&lt;li&gt;一个树的叶子节点可以使用深度优先或者广度优先访问到&lt;/li&gt;
&lt;li&gt;迭代一个代表数据库查询结果的对象应该一行一行的返回，即使整个结果集尚未全部加载到一个单一数组&lt;/li&gt;
&lt;li&gt;作用在一个无限数学序列(像斐波那契序列)上的迭代器应该在不创建无限长度数据结构的前提下一个接一个的返回结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JavaScript 允许你写自定义迭代逻辑的代码，并把它作用在一个对象上&lt;/p&gt;

&lt;p&gt;我们创建一个简单的 &lt;code&gt;Range&lt;/code&gt; 对象，包含低和高两个值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    function Range(low, high){
      this.low = low;
      this.high = high;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们创建一个自定义迭代器，它返回一个包含范围内所有整数的序列。迭代器接口需要我们提供一个 &lt;code&gt;next()&lt;/code&gt; 方法用来返回序列中的下一个元素或者是抛出 &lt;code&gt;StopIteration&lt;/code&gt; 异常。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    function RangeIterator(range){
      this.range = range;
      this.current = this.range.low;
    }
    RangeIterator.prototype.next = function(){
      if (this.current &amp;gt; this.range.high)
        throw StopIteration;
      else
        return this.current++;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们的 &lt;code&gt;RangeIterator&lt;/code&gt; 通过 range 实例来实例化，同时维持一个 &lt;code&gt;current&lt;/code&gt; 属性来跟踪当前序列的位置。&lt;/p&gt;

&lt;p&gt;最后，为了让 &lt;code&gt;RangeIterator&lt;/code&gt; 可以和 &lt;code&gt;Range&lt;/code&gt; 结合起来，我们需要为 &lt;code&gt;Range&lt;/code&gt; 添加一个特殊的 &lt;code&gt;__iterator__&lt;/code&gt; 方法。当我们试图去迭代一个 &lt;code&gt;Range&lt;/code&gt; 时，它将被调用，而且应该返回一个实现了迭代逻辑的 &lt;code&gt;RangeIterator&lt;/code&gt; 实例。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Range.prototype.__iterator__ = function(){
      return new RangeIterator(this);
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成我们的自定义迭代器后，我们就可以迭代一个范围实例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var range = new Range(3, 5);
    for (var i in range)
      print(i); //输出 3，然后 4，然后 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##生成器：一种更好的方式来构建迭代器&lt;/p&gt;

&lt;p&gt;虽然自定义的迭代器是一种很有用的工具，但是创建它们的时候要仔细规划，因为需要显式的维护它们的内部状态。
生成器提供了很强大的功能：它允许你定义一个包含自有迭代算法的函数， 同时它可以自动维护自己的状态。&lt;/p&gt;

&lt;p&gt;生成器是可以作为迭代器工厂的特殊函数。如果一个函数包含了一个或多个 &lt;code&gt;yield&lt;/code&gt; 表达式，那么就称它为生成器(译者注：Node.js 还需要在函数名前加 &lt;code&gt;*&lt;/code&gt; 来表示)。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：只有 HTML 中被包含在 &lt;code&gt;&amp;lt;script type=&amp;quot;application/javascript;version=1.7&amp;quot;&amp;gt;&lt;/code&gt; (或者更高版本)中的代码块才可以使用 &lt;code&gt;yield&lt;/code&gt; 关键字。&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/XUL&#34;&gt;XUL&lt;/a&gt; (XML User Interface Language) 脚本标签不需要指定这个特殊的代码块也可以访问这些特性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当一个生成器函数被调用时，函数体不会即刻执行，它会返回一个 generator-iterator 对象。每次调用 generator-iterator 的 &lt;code&gt;next()&lt;/code&gt; 方法，函数体就会执行到下一个 &lt;code&gt;yield&lt;/code&gt; 表达式，然后返回它的结果。当函数结束或者碰到 &lt;code&gt;return&lt;/code&gt; 语句，一个 &lt;code&gt;StopIteration&lt;/code&gt; 异常会被抛出。&lt;/p&gt;

&lt;p&gt;用一个例子来更好的说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    function simpleGenerator(){
      yield &amp;quot;first&amp;quot;;
      yield &amp;quot;second&amp;quot;;
      yield &amp;quot;third&amp;quot;;
      for (var i = 0; i &amp;lt; 3; i++)
        yield i;
    }
    
    var g = simpleGenerator();
    print(g.next()); //输出 &amp;quot;first&amp;quot;
    print(g.next()); //输出 &amp;quot;second&amp;quot;
    print(g.next()); //输出 &amp;quot;third&amp;quot;
    print(g.next()); //输出 0
    print(g.next()); //输出 1
    print(g.next()); //输出 2
    print(g.next()); //抛出 StopIteration 异常
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成器函数可以被一个类直接的当做 &lt;code&gt;__iterator__&lt;/code&gt; 方法使用，在需要自定义迭代器的地方可以有效的减少代码量。我们使用生成器重写一下 &lt;code&gt;Range&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    function Range(low, high){
      this.low = low;
      this.high = high;
    }
    Range.prototype.__iterator__ = function(){
      for (var i = this.low; i &amp;lt;= this.high; i++)
        yield i;
    };
    var range = new Range(3, 5);
    for (var i in range)
      print(i); //输出 3，然后 4，然后 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不是所有的生成器都会终止，你可以创建一个代表无限序列的生成器。下面的生成器实现一个斐波那契序列，就是每一个元素都是前面两个的和：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    function fibonacci(){
      var fn1 = 1;
      var fn2 = 1;
      while (1) {
        var current = fn2;
        fn2 = fn1;
        fn1 = fn1 + current;
        yield current;
      }
    }
    
    var sequence = fibonacci();
    print(sequence.next()); // 1
    print(sequence.next()); // 1
    print(sequence.next()); // 2
    print(sequence.next()); // 3
    print(sequence.next()); // 5
    print(sequence.next()); // 8
    print(sequence.next()); // 13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成器函数可以带有参数，并且会在第一次调用函数时使用这些参数。生成器可以被终止(引起它抛出 &lt;code&gt;StopIteration&lt;/code&gt; 异常)通过使用 &lt;code&gt;return&lt;/code&gt; 语句。下面的 &lt;code&gt;fibonacci()&lt;/code&gt; 变体带有一个可选的 limit 参数，当条件被触发时终止函数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    function fibonacci(limit){
      var fn1 = 1;
      var fn2 = 1;
      while(1){
        var current = fn2;
        fn2 = fn1;
        fn1 = fn1 + current;
        if (limit &amp;amp;&amp;amp; current &amp;gt; limit)
          return;
        yield current;
      }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##生成器高级特性&lt;/p&gt;

&lt;p&gt;生成器可以根据需求计算yield返回值，这使得它可以表示以前昂贵的序列计算需求，甚至是上面所示的无限序列。&lt;/p&gt;

&lt;p&gt;除了 &lt;code&gt;next()&lt;/code&gt; 方法，generator-iterator 对象还有一个 &lt;code&gt;send()&lt;/code&gt; 方法，该方法可以修改生成器的内部状态。传给 &lt;code&gt;send()&lt;/code&gt; 的值将会被当做最后一个 &lt;code&gt;yield&lt;/code&gt; 表达式的结果，并且会暂停生成器。在你使用 &lt;code&gt;send()&lt;/code&gt; 方法传一个指定值前，你必须至少调用一次 &lt;code&gt;next()&lt;/code&gt; 来启动生成器。&lt;/p&gt;

&lt;p&gt;下面的斐波那契生成器使用 &lt;code&gt;send()&lt;/code&gt; 方法来重启序列：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    function fibonacci(){
      var fn1 = 1;
      var fn2 = 1;
      while (1) {
        var current = fn2;
        fn2 = fn1;
        fn1 = fn1 + current;
        var reset = yield current;
        if (reset) {
          fn1 = 1;
          fn2 = 1;
        }
      }
    }
    
    var sequence = fibonacci();
    print(sequence.next());     //1
    print(sequence.next());     //1
    print(sequence.next());     //2
    print(sequence.next());     //3
    print(sequence.next());     //5
    print(sequence.next());     //8
    print(sequence.next());     //13
    print(sequence.send(true)); //1
    print(sequence.next());     //1
    print(sequence.next());     //2
    print(sequence.next());     //3
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：有意思的一点是，调用 &lt;code&gt;send(undefined)&lt;/code&gt; 和调用 &lt;code&gt;next()&lt;/code&gt; 是完全同等的。不过，当调用 &lt;code&gt;send()&lt;/code&gt; 方法启动一个新的生成器时，除了 &lt;code&gt;undefined&lt;/code&gt; 其它的值都会抛出一个 &lt;code&gt;TypeError&lt;/code&gt; 异常。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你可以调用 &lt;code&gt;throw&lt;/code&gt; 方法并且传递一个它应该抛出的异常值来强制生成器抛出一个异常。此异常将从当前上下文抛出并暂停生成器，类似当前的 &lt;code&gt;yield&lt;/code&gt; 执行，只不过换成了 &lt;code&gt;throw value&lt;/code&gt; 语句。&lt;/p&gt;

&lt;p&gt;如果在抛出异常的处理过程中没有遇到 &lt;code&gt;yield&lt;/code&gt; ，该异常将会被传递直到调用 &lt;code&gt;throw()&lt;/code&gt; 方法，并且随后调用 &lt;code&gt;next()&lt;/code&gt; 将会导致 &lt;code&gt;StopIteration&lt;/code&gt; 异常被抛出。&lt;/p&gt;

&lt;p&gt;生成器拥有一个 &lt;code&gt;close()&lt;/code&gt; 方法来强制生成器结束。结束一个生成器会产生如下影响：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;所有生成器中有效的 &lt;code&gt;finally&lt;/code&gt; 字句将会执行&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;finally&lt;/code&gt; 字句抛出了除 &lt;code&gt;StopIteration&lt;/code&gt; 以外的任何异常，该异常将会被传递到 &lt;code&gt;close()&lt;/code&gt; 方法的调用者&lt;/li&gt;
&lt;li&gt;生成器会终止&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##生成器表达式&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Guide/Predefined_Core_Objects#Array_comprehensions&#34;&gt;数组推导式&lt;/a&gt;的一个明显缺点是，它们会导致整个数组在内存中构造。当输入到推导式的本身是个小数组时它的开销是微不足道的&amp;ndash;但是，当输入数组很大或者创建一个新的昂贵(或者是无限的)数组生成器时就可能出现问题。&lt;/p&gt;

&lt;p&gt;生成器允许对序列延迟计算(lazy computation)，在需要时按需计算元素。生成器表达式在句法上几乎和数组推导式相同&amp;ndash;它用圆括号来代替方括号(而且用 &lt;code&gt;for...in&lt;/code&gt; 代替 &lt;code&gt;for each...in&lt;/code&gt;)&amp;ndash;但是它创建一个生成器而不是数组，这样就可以延迟计算。你可以把它想象成创建生成器的简短语法。&lt;/p&gt;

&lt;p&gt;假设我们有一个迭代器 &lt;code&gt;it&lt;/code&gt; 来迭代一个巨大的整数序列。我们需要创建一个新的迭代器来迭代偶数。一个数组推导式将会在内存中创建整个包含所有偶数的数组：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var doubles = [i * 2 for (i in it)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而生成器表达式将会创建一个新的迭代器，并且在需要的时候按需来计算偶数值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var it2 = (i * 2 for (i in it));
    print(it2.next());  //it 里面的第一个偶数
    print(it2.next());  //it 里面的第二个偶数
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当一个生成器被用做函数的参数，圆括号被用做函数调用，意味着最外层的圆括号可以被省略：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var result = doSomething(i * 2 for (i in it));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/A-limon/pacman&#34;&gt;Pacman&lt;/a&gt; 主题已华丽更新，再次推荐！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>告别node-forever, 拥抱PM2</title>
      <link>https://se77en.cc/2013/%E5%91%8A%E5%88%ABnode-forever-%E6%8B%A5%E6%8A%B1pm2/</link>
      <pubDate>Thu, 27 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://se77en.cc/2013/%E5%91%8A%E5%88%ABnode-forever-%E6%8B%A5%E6%8A%B1pm2/</guid>
      <description>&lt;p&gt;原文地址:&lt;a href=&#34;http://devo.ps/blog/2013/06/26/goodbye-node-forever-hello-pm2.html&#34;&gt;Goodbye node-forever,hello PM2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://se77en.cc/img/goodbye-node-forever-hello-pm2-translation/pm22.png&#34; alt=&#34;pm2-logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;devo.ps团队对JavaScript的迷恋已经不是什么秘密了;node.js作为服务器端,AngularJS作为客户端,某种程度上说,我们的堆栈是用它建成的.我们构建&lt;a href=&#34;http://devo.ps/blog/2013/01/31/farewell-to-regular-web-development-approaches.html&#34;&gt;静态客户端和RESTful JSON API&lt;/a&gt;的方法意味着我们跑了很多的node.js,我必须承认尽管node.js的一切都令人敬畏,但当我们在生产环境中运行它时它仍然会让我们感到头疼.相比一些更加成熟的语言,它的工具和最佳实践仍然缺乏(试想一下:监控,日志,错误处理).

到目前为止,我们仍然依赖漂亮俏皮的&lt;a href=&#34;https://github.com/nodejitsu/forever&#34;&gt;node-forever模块&lt;/a&gt;.它是非常伟大的模块,不过依然缺失一些功能:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有限的监控和日志功能&lt;/li&gt;
&lt;li&gt;进程管理配置的支持差&lt;/li&gt;
&lt;li&gt;不支持集群&lt;/li&gt;
&lt;li&gt;代码库老化(意味着在升级node.js时频繁的失败)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这就是为什么我们要在过去的几个月里去写&lt;a href=&#34;https://github.com/Unitech/pm2&#34;&gt;PM2模块&lt;/a&gt;.在我们即将发布针对生产环境的正式版之前我们想先让您看一眼.&lt;/p&gt;

&lt;p&gt;###&lt;strong&gt;PM2到底是什么个东西呢?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先第一件事,你需要先通过&lt;code&gt;npm&lt;/code&gt;来安装它:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g pm2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们通过表格来对比下:&lt;/p&gt;

&lt;table class=&#34;table table-bordered table-striped table-condensed&#34;&gt;
   &lt;tr&gt;
      &lt;th width=&#34;50%&#34;&gt;Feature&lt;/th&gt;
      &lt;th width=&#34;25%&#34;&gt;Forever&lt;/th&gt;
      &lt;th width=&#34;25%&#34;&gt;PM2&lt;/th&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;Keep Alive&lt;/td&gt;
      &lt;td&gt;&amp;#10004;&lt;/td&gt;
      &lt;td&gt;&amp;#10004;&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;Coffeescript&lt;/td&gt;
      &lt;td&gt;&amp;#10004;&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;Log aggregation&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td&gt;&amp;#10004;&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;API&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td&gt;&amp;#10004;&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;Terminal monitoring&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td&gt;&amp;#10004;&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;Clustering&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td&gt;&amp;#10004;&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;JSON configuration&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td&gt;&amp;#10004;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;现在让我来介绍一点点主要特性&amp;hellip;&lt;/p&gt;

&lt;p&gt;###&lt;strong&gt;原生的集群化支持&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node v0.6引入了集群特性,允许你在多个Node应用中共享socket.问题在于,它不能在容器外运行而且需要一些额外的配置来处理主进程和子进程.&lt;/p&gt;

&lt;p&gt;PM2原生支持处理这个问题,而且不需要额外的代码:PM2本身作为主进程,然后它将你的代码封装到一个特殊的集群进程里,就像node.js一样,为你的代码文件添加一些全局变量.&lt;/p&gt;

&lt;p&gt;想要启动一个使用所有CPU核心的集群,你只需要键入如下的指令:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pm2 start app.js -i max
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pm2 list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就会显示类似下面的东西(ASCII UI FTW);&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://se77en.cc/img/goodbye-node-forever-hello-pm2-translation/pm2-list.png&#34; alt=&#34;pm2-list&#34; /&gt;&lt;/p&gt;

&lt;p&gt;就像你看到的,现在你的应用有多少个进程就取决于你的CPU核心数了&lt;/p&gt;

&lt;p&gt;###&lt;strong&gt;按照termcaps-HTOP(Linux下的系统监控与进程管理软件)的方式管理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过&lt;code&gt;pm2 list&lt;/code&gt;命令来观察所有运行的进程以及它们的状态已经足够好了.但是怎么来追踪它们的资源消耗呢?别担心,用这个命令:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pm2 monit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以得到进程(以及集群)的CPU的使用率和内存占用.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://se77en.cc/img/goodbye-node-forever-hello-pm2-translation/pm2-monit.png&#34; alt=&#34;pm2-monit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;声明:&lt;/strong&gt;&lt;a href=&#34;https://github.com/arunoda/node-usage&#34;&gt;node-usage&lt;/a&gt;到目前为止还不支持MacOS(随便什么性能要求),不过它在Linux下运行良好.&lt;/p&gt;

&lt;p&gt;现在,让我们来核实一下我们的集群,还有对内存堆栈的垃圾回收,我们假设你已经有一个HTTP基准测试工具(如果没有,你一定要使用&lt;a href=&#34;https://github.com/wg/wrk&#34;&gt;WRK&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ express bufallo    //Create an express app
    $ cd bufallo
    $ npm install
    $ pm2 start app.js -i max
    $ wrk -c 100 -d 100 http://localhost:3000/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在另一个终端,运行监控选项:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pm2 monit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;耶~&lt;/p&gt;

&lt;p&gt;###&lt;strong&gt;实时集中log处理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现在你不得不管理多个集群进程:一个爬取数据,一个处理数据,等等&amp;hellip;这就意味着大量log,你可以按照老式的方法处理:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tail -f /path/to/log1 /path/to/log2 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但我们想的很周到,我们增加了&lt;code&gt;logs&lt;/code&gt;功能:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pm2 logs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://se77en.cc/img/goodbye-node-forever-hello-pm2-translation/pm2-logs.png&#34; alt=&#34;pm2-logs&#34; /&gt;&lt;/p&gt;

&lt;p&gt;###&lt;strong&gt;快速恢复&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现在事情一切顺利,你的进程嗡嗡的运行着,你需要做一次硬重启(hard restart).现在吗?是的,首先,dump掉:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pm2 dump
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后,你可以从文件中恢复它:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pm2 kill      //让我们假设一个PM2停掉了
$ pm2 resurect  //我所有的进程又满血满状态复活了
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###&lt;strong&gt;强健的API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比方说,你想要监控所有被PM2管理的进程,而且同时还想监控运行这些进程的机器的状态(甚至希望创建一个Angular应用来调用这些API&amp;hellip;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pm2 web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开浏览器输入&lt;a href=&#34;http://localhost:9615&#34;&gt;http://localhost:9615&lt;/a&gt; ,我嘞个去!&lt;/p&gt;

&lt;p&gt;###&lt;strong&gt;对了,还有很多特性&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全部测试通过,&lt;/li&gt;
&lt;li&gt;新一代的&lt;code&gt;update-rc.d&lt;/code&gt;(&lt;code&gt;pm2 startup&lt;/code&gt;),当然它还是alpha版,&lt;/li&gt;
&lt;li&gt;开发模式下更改文件自动重启(&lt;code&gt;pm2 dev&lt;/code&gt;),也同样还是草稿,&lt;/li&gt;
&lt;li&gt;自动刷新log,&lt;/li&gt;
&lt;li&gt;快捷的通过JSON文件管理你的应用,&lt;/li&gt;
&lt;li&gt;在error log里记录未捕获的异常,&lt;/li&gt;
&lt;li&gt;记录重启的次数和时间,&lt;/li&gt;
&lt;li&gt;退出时自动杀死进程.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##&lt;strong&gt;下一步计划?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先,你可以去&lt;a href=&#34;https://github.com/Unitech/pm2&#34;&gt;Github上&lt;/a&gt;粉我们(我们喜欢stars).&lt;/p&gt;

&lt;p&gt;我们开发的PM2提供了先进完整的Node进程管理解决方案.我们希望能有更多的人来帮助我们:更多的pull requests.一些还停留在开发路线图上面的功能我们会尽快完成,下面这些就是:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;远程管理/状态校验,&lt;/li&gt;
&lt;li&gt;嵌入式跨进程通信通道(消息总线),&lt;/li&gt;
&lt;li&gt;V8垃圾回收的内存泄漏检查,&lt;/li&gt;
&lt;li&gt;Web界面,&lt;/li&gt;
&lt;li&gt;监控数据持久化,&lt;/li&gt;
&lt;li&gt;邮件通知.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特别感谢&lt;a href=&#34;https://github.com/makara&#34;&gt;Makara Wang&lt;/a&gt;的观点和工具,还有&lt;a href=&#34;https://github.com/rlidwka&#34;&gt;Alex Kocharin&lt;/a&gt;提的建议和提交的代码.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在&lt;a href=&#34;https://twitter.com/intent/tweet?text=@devo_ps%20&amp;amp;related=devo_ps&amp;amp;url=http://devo.ps/blog/2013/06/26/goodbye-node-forever-hello-pm2.html&#34;&gt;Twitter&lt;/a&gt;上给我们反馈吧.&lt;/li&gt;
&lt;li&gt;欢迎在&lt;a href=&#34;http://news.ycombinator.com/item?id=5945420&#34;&gt;Hacker News&lt;/a&gt;上和我们一起谈论&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本博客基于&lt;a href=&#34;http://zespia.tw/hexo/zh-CN/&#34;&gt;hexo&lt;/a&gt;搭建,推荐一个不错的主题&lt;a href=&#34;https://github.com/A-limon/pacman&#34;&gt;Pacman&lt;/a&gt;,虽然我还没用上,不过可以去&lt;a href=&#34;http://yangjian.me&#34;&gt;@A-limon&lt;/a&gt;的主页查看效果.&lt;/p&gt;

&lt;p&gt;最后感谢&lt;a href=&#34;http://weibo.com/436062867&#34;&gt;@A-limon&lt;/a&gt;同学提供翻译建议和审读.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>